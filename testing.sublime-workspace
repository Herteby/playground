{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"subscr",
				"subscriptionHandle"
			],
			[
				"un",
				"unsubscribe"
			],
			[
				"subsc",
				"subscriptionHandle"
			],
			[
				"sub",
				"subscriptionHandle"
			],
			[
				"ld",
				"ld.chunk()\t _ Array"
			],
			[
				"cld",
				"cld.compact()\t _ Array"
			],
			[
				"F",
				"Facebook"
			],
			[
				"app",
				"appendChild〔function〕"
			],
			[
				"round",
				"Math_round\t( x: number ): number Math"
			],
			[
				"Math",
				"Math_round\t( x: number ): number Math"
			],
			[
				"S",
				"String\t( value: any ): String String"
			],
			[
				"translate",
				"translation〔variable〕"
			],
			[
				"a",
				"appendChild〔function〕"
			],
			[
				"Dictionary",
				"DictionaryCache"
			],
			[
				"up",
				"upsert (fn) [C]"
			],
			[
				"Rea",
				"ReactiveVar    (fn) [C]"
			],
			[
				"confirm",
				"confirm\t( message?: DOMString ): boolean Window"
			],
			[
				"wor",
				"word-wrap\tstyl"
			],
			[
				"paddin",
				"padding-right\tstyl"
			],
			[
				"text",
				"text-transform\tstyl"
			],
			[
				"get",
				"getRouteName"
			],
			[
				"flex",
				"flex-direction\tstyl"
			],
			[
				"g",
				"getRouteName"
			],
			[
				"client",
				"clientaddress"
			],
			[
				"launc",
				"launchScreens"
			],
			[
				"animation",
				"animation-delay"
			],
			[
				"animation-",
				"animation-iteration-count"
			],
			[
				"Date",
				"Date〔class〕"
			],
			[
				"day",
				"dayOrId"
			],
			[
				"Push",
				"PushNotification〔variable〕"
			],
			[
				"border-top",
				"border-top-right-radius"
			],
			[
				"ba",
				"background-color"
			],
			[
				"pre",
				"pre-wrap"
			],
			[
				"ju",
				"justify-content"
			],
			[
				"right",
				"rightSidebar"
			],
			[
				"atte",
				"attemptModal"
			],
			[
				"class",
				"cellClass"
			],
			[
				"animat",
				"animation-name"
			],
			[
				"upl",
				"uploadedAt"
			],
			[
				"anim",
				"animation-timing-function"
			],
			[
				"vertica",
				"vertical-align"
			],
			[
				"animta",
				"animation-iteration-count"
			],
			[
				"font-",
				"font-family"
			],
			[
				"ani",
				"animation-iteration-count"
			],
			[
				"c",
				"Collection"
			],
			[
				"border",
				"border-bottom-left-radius"
			],
			[
				"backgro",
				"background-size"
			],
			[
				"back",
				"background-position"
			],
			[
				"bac",
				"background-position"
			],
			[
				"dra",
				"dragTodo"
			],
			[
				"vert",
				"vertical-align"
			],
			[
				"workorderlin",
				"workorderlinelimit"
			],
			[
				"work",
				"Workorderlines"
			],
			[
				"anima",
				"animation-name"
			],
			[
				"trans",
				"transition-timing-function"
			],
			[
				"tran",
				"transition-timing-function"
			],
			[
				"mo",
				"mouseenter\t.mouseenter()"
			],
			[
				"web",
				"webkit-appearance"
			],
			[
				"workorder",
				"workorders"
			],
			[
				"pointer",
				"pointer-events"
			],
			[
				"initia",
				"initialize_MarkerWithLabel"
			],
			[
				"flex-",
				"flex-grow"
			],
			[
				"overf",
				"overflow-x"
			],
			[
				"lin",
				"line-through"
			],
			[
				"text-",
				"text-decoration"
			],
			[
				"border-botto",
				"border-bottom-right-radius"
			],
			[
				"first",
				"first-of-type"
			],
			[
				"user",
				"user-select"
			],
			[
				"border-bottom",
				"border-bottom-left-radius"
			],
			[
				"la",
				"latLng"
			],
			[
				"modal",
				"modalBackground"
			],
			[
				"poinr",
				"pointer-events"
			],
			[
				"no",
				"nowrap"
			],
			[
				"ca",
				"capitalizeFirstLetter"
			],
			[
				"last-",
				"last-of-type"
			],
			[
				"webkit",
				"webkit-scrollbar"
			],
			[
				"bord",
				"border-bottom-left-radius"
			],
			[
				"border-",
				"border-bottom-right-radius"
			],
			[
				"poin",
				"pointer-events"
			],
			[
				"border-bott",
				"border-bottom-right-radius"
			],
			[
				"box-",
				"box-sizing"
			],
			[
				"po",
				"pointer-events"
			],
			[
				"border-bo",
				"border-bottom-right-radius"
			],
			[
				"last",
				"last-of-type"
			],
			[
				"load",
				"loadmore"
			],
			[
				"ease",
				"ease-in-out"
			],
			[
				"obser",
				"observeChanges\tMeteor: cursor.observeChanges(callbacks)"
			],
			[
				"Tracker",
				"Tracker.autorun\tMeteor: Tracker.autorun(runFunc)"
			],
			[
				"bq",
				"bqgreen2"
			],
			[
				"bqgree",
				"bqgreen"
			],
			[
				"lgrey",
				"lgrey4"
			],
			[
				"lg",
				"lgrey1"
			],
			[
				"n",
				"nowrap"
			],
			[
				"true",
				"trueEmployee"
			],
			[
				"bqgreen",
				"bqgreen3"
			],
			[
				"border-lef",
				"border-bottom-left-radius"
			],
			[
				"border-left",
				"border-top-left-radius"
			],
			[
				"border-right",
				"border-bottom-right-radius"
			],
			[
				"dgrey",
				"dgrey2"
			],
			[
				"bor",
				"border-top-right-radius"
			],
			[
				"border-t",
				"border-top-left-radius"
			],
			[
				"border-radius",
				"border-top-right-radius"
			],
			[
				"total",
				"totalcostmax   (num)  [E]"
			],
			[
				"bal",
				"balconycost (num)  [E]"
			],
			[
				"fonster",
				"fonsterkarmarcost (num)  [E]"
			],
			[
				"fons",
				"fonsterkarmarcost (num)  [E]"
			],
			[
				"clea",
				"cleaningcostmax     (num)  [E]"
			],
			[
				"cleaning",
				"cleaningcostmin     (obj)  [E]"
			],
			[
				"border-radi",
				"border-bottom-right-radius"
			],
			[
				"border-c",
				"border-collapse"
			],
			[
				"cleaningcost",
				"cleaningcostmax     (num)  [E]"
			],
			[
				"Work",
				"WorkorderLines"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "Searching 15 files for \"query\"\n\n/home/simon/Desktop/testing/client/components/grapher.vue:\n   21  \t\t</div>\n   22  \t\t<item v-else :item=\"stuff.result\"/>\n   23: \t\tQuery:\n   24: \t\t<pre>{{query}}</pre>\n   25  \t\tResult:\n   26  \t\t<pre>{{stuff}}</pre>\n   ..\n   39  \t\t\t\tselected:false,\n   40  \t\t\t\tsearch:'',\n   41: \t\t\t\tquery:{}\n   42  \t\t\t}\n   43  \t\t},\n   ..\n   52  \t\t\t\t}\n   53  \t\t\t\t\n   54: \t\t\t\tlet query = {\n   55  \t\t\t\t\tsubscribe:this.subscribe,\n   56  \t\t\t\t\tsingle:this.single,\n   57  \t\t\t\t\tcollection:Test,\n   58: \t\t\t\t\tquery:{\n   59  \t\t\t\t\t\t_id:1,\n   60  \t\t\t\t\t\tcolor:1,\n   ..\n   71  \n   72  \t\t\t\t//Create the JSON display\n   73: \t\t\t\tlet display = _.clone(query)\n   74  \t\t\t\tdisplay.collection = display.collection._name\n   75: \t\t\t\tthis.query = Object.freeze(display)\n   76  \n   77: \t\t\t\treturn query\n   78  \t\t\t}\n   79  \t\t}\n\n/home/simon/Desktop/testing/client/components/infinite.vue:\n   22  \t\t\t\treturn {\n   23  \t\t\t\t\tcollection:Test,\n   24: \t\t\t\t\tquery:{\n   25  \t\t\t\t\t\t_id:1,\n   26  \t\t\t\t\t\tcolor:1,\n\n9 matches across 2 files\n\n\nSearching 142 files for \"query\"\n\n/home/simon/Desktop/testing/client/components/grapher.vue:\n   21  \t\t</div>\n   22  \t\t<item v-else :item=\"stuff.result\"/>\n   23: \t\tQuery:\n   24: \t\t<pre>{{query}}</pre>\n   25  \t\tResult:\n   26  \t\t<pre>{{stuff}}</pre>\n   ..\n   39  \t\t\t\tselected:false,\n   40  \t\t\t\tsearch:'',\n   41: \t\t\t\tquery:{}\n   42  \t\t\t}\n   43  \t\t},\n   ..\n   52  \t\t\t\t}\n   53  \t\t\t\t\n   54: \t\t\t\tlet query = {\n   55  \t\t\t\t\tsubscribe:this.subscribe,\n   56  \t\t\t\t\tsingle:this.single,\n   57  \t\t\t\t\tcollection:Test,\n   58: \t\t\t\t\tquery:{\n   59  \t\t\t\t\t\t_id:1,\n   60  \t\t\t\t\t\tcolor:1,\n   ..\n   71  \n   72  \t\t\t\t//Create the JSON display\n   73: \t\t\t\tlet display = _.clone(query)\n   74  \t\t\t\tdisplay.collection = display.collection._name\n   75: \t\t\t\tthis.query = Object.freeze(display)\n   76  \n   77: \t\t\t\treturn query\n   78  \t\t\t}\n   79  \t\t}\n\n/home/simon/Desktop/testing/client/components/infinite.vue:\n   22  \t\t\t\treturn {\n   23  \t\t\t\t\tcollection:Test,\n   24: \t\t\t\t\tquery:{\n   25  \t\t\t\t\t\t_id:1,\n   26  \t\t\t\t\t\tcolor:1,\n\n/home/simon/Desktop/testing/packages/grapher/CHANGELOG.md:\n    2  - Support for promises via .fetchSync and .fetchOneSync for client-side queries\n    3  - Support for autoremove from inverse side as well\n    4: - Fixed .fetchOne from client-side Query\n    5  \n    6  ## 1.2.4\n    .\n   45  \n   46  ## 1.1.9\n   47: - Added .clone() to Query\n   48: - Added namedQuery concept. \n   49  - Direct meta-children are automatically appended with $metadata\n   50: - Added .fetchOne() to Query\n   51  - Modified Documentor so it returns queries also.\n   52  - Fixed bug with deep $filter() function\n   ..\n   63  \n   64  ## 1.1.4\n   65: - Decoupled query fetcher better, removing automatically \"skip\" option when fetching as client\n   66  - Ability to allow skip when you want custom behavior\n   67  \n\n/home/simon/Desktop/testing/packages/grapher/README.md:\n   60  #### Integration with React (cultofcoders:grapher-react)\n   61  \n   62: Provides you with an easy to use \"createQueryContainer\" function.\n   63  \n   64  - [Atmosphere](https://atmospherejs.com/cultofcoders/grapher-react)\n\n/home/simon/Desktop/testing/packages/grapher/main.client.js:\n    1  import './lib/links/extension.js';\n    2: import './lib/query/extension.js';\n    3: import './lib/query/reducers/extension.js';\n    4: import './lib/namedQuery/_extension.js'; //deprecated\n    5  \n    6  export {\n    7:     default as createQuery\n    8: } from './lib/query/createQuery.js';\n    9  \n   10  export {\n   11:     default as createNamedQuery\n   12: } from './lib/namedQuery/_createNamedQuery.js'; //deprecated\n   13  \n   14  export {\n   15      default as prepareForProcess\n   16: } from './lib/query/lib/prepareForProcess';\n   17  \n\n/home/simon/Desktop/testing/packages/grapher/main.server.js:\n    1  import './lib/exposure/extension.js';\n    2  import './lib/links/extension.js';\n    3: import './lib/query/extension.js';\n    4: import './lib/query/reducers/extension.js';\n    5: import './lib/namedQuery/expose/extension.js';\n    6: import './lib/namedQuery/_extension.js'; //deprecated\n    7  \n    8  export {\n    9:     default as createQuery\n   10: } from './lib/query/createQuery.js';\n   11  \n   12  export {\n   13:     default as createNamedQuery\n   14: } from './lib/namedQuery/_createNamedQuery.js'; //deprecated\n   15  \n   16  export {\n\n/home/simon/Desktop/testing/packages/grapher/package.js:\n   67      api.addFiles('lib/exposure/testing/client.js', 'client');\n   68  \n   69:     // QUERY\n   70:     api.addFiles('lib/query/testing/bootstrap/index.js');\n   71  \n   72      // When you play with tests you should comment this to make tests go faster.\n   73:     api.addFiles('lib/query/testing/bootstrap/fixtures.js', 'server');\n   74  \n   75:     api.addFiles('lib/query/testing/server.test.js', 'server');\n   76:     api.addFiles('lib/query/testing/client.test.js', 'client');\n   77  \n   78:     // NAMED QUERY\n   79:     api.addFiles('lib/namedQuery/testing/bootstrap/both.js');\n   80:     api.addFiles('lib/namedQuery/testing/bootstrap/client.js', 'client');\n   81:     api.addFiles('lib/namedQuery/testing/bootstrap/server.js', 'server');\n   82  \n   83:     api.addFiles('lib/namedQuery/testing/server.test.js', 'server');\n   84:     api.addFiles('lib/namedQuery/testing/client.test.js', 'client');\n   85  });\n   86  \n\n/home/simon/Desktop/testing/packages/grapher/lib/documentor/index.js:\n    1  import { linkStorage } from '../links/symbols.js';\n    2: import NamedQueryStore from '../namedQuery/store';\n    3: import deepClone from '../query/lib/deepClone';\n    4  \n    5  export default function extract() {\n    6      return {\n    7:         namedQueries: extractNamedQueryDocumentation(),\n    8          collections: extractCollectionDocumentation()\n    9      }\n   10  };\n   11  \n   12: function extractNamedQueryDocumentation() {\n   13:     const namedQueries = NamedQueryStore.getAll();\n   14  \n   15      let DocumentationObject = {};\n   16  \n   17:     _.each(namedQueries, namedQuery => {\n   18:         DocumentationObject[namedQuery.queryName] = {\n   19:             body: namedQuery.body,\n   20:             collection: namedQuery.collection._name,\n   21:             isExposed: namedQuery.isExposed,\n   22:             paramsSchema: (namedQuery.exposeConfig.schema)\n   23                  ?\n   24                  formatSchemaType(\n   25:                     deepClone(namedQuery.exposeConfig.schema)\n   26                  )\n   27                  : null\n\n/home/simon/Desktop/testing/packages/grapher/lib/exposure/exposure.config.schema.js:\n    1  import { SimpleSchema } from 'meteor/aldeed:simple-schema';\n    2: import createGraph from '../query/lib/createGraph.js';\n    3  \n    4  let Schema = new SimpleSchema({\n\n/home/simon/Desktop/testing/packages/grapher/lib/exposure/exposure.js:\n    1: import createGraph from '../query/lib/createGraph.js';\n    2: import recursiveCompose from '../query/lib/recursiveCompose.js';\n    3: import hypernova from '../query/hypernova/hypernova.js';\n    4  import ExposureConfigSchema from './exposure.config.schema.js';\n    5  import enforceMaxDepth from './lib/enforceMaxDepth.js';\n    6  import enforceMaxLimit from './lib/enforceMaxLimit.js';\n    7  import cleanBody from './lib/cleanBody.js';\n    8: import deepClone from '../query/lib/deepClone';\n    9  import restrictFieldsFn from './lib/restrictFields.js';\n   10  import restrictLinks from './lib/restrictLinks.js';\n   ..\n  119  \n  120      /**\n  121:      * Initializing the publication for reactive query fetching\n  122       */\n  123      initPublication() {\n\n/home/simon/Desktop/testing/packages/grapher/lib/exposure/lib/cleanBody.js:\n    1: import deepClone from '../../query/lib/deepClone';\n    2  import {cleanFilters, cleanOptions} from './cleanSelectors';\n    3: import dotize from '../../query/lib/dotize';\n    4  \n    5  /**\n\n/home/simon/Desktop/testing/packages/grapher/lib/exposure/testing/client.js:\n    8  describe('Exposure Tests', function () {\n    9      it('Should fetch only allowed data and limitations should be applied', function (done) {\n   10:         const query = Demo.createQuery({\n   11              $options: {limit: 3},\n   12              restrictedField: 1\n   13          });\n   14  \n   15:         query.fetch((err, res) => {\n   16              assert.isUndefined(err);\n   17              assert.isDefined(res);\n   ..\n   23  \n   24      it('Should not allow me to fetch the graph data, because of maxDepth', function (done) {\n   25:         const query = Demo.createQuery({\n   26              $options: {limit: 3},\n   27              restrictedField: 1,\n   ..\n   33          });\n   34  \n   35:         query.fetch((err, res) => {\n   36              assert.isUndefined(res);\n   37              assert.isDefined(err);\n   ..\n   50      });\n   51  \n   52:     it('Should return the correct count via query', function (done) {\n   53:         const query = Demo.createQuery({\n   54              $options: {limit: 1}\n   55          });\n   56  \n   57:         query.getCount(function (err, res) {\n   58              assert.isUndefined(err);\n   59  \n   ..\n   64  \n   65      it('Should should not allow publish but only method', function (done) {\n   66:         const query = DemoMethod.createQuery({\n   67              _id: 1\n   68          });\n   69  \n   70:         query.fetch((err, res) => {\n   71              assert.isUndefined(err);\n   72              assert.isDefined(res);\n   73          });\n   74  \n   75:         const handler = query.subscribe({\n   76              onStop(e) {\n   77                  done();\n   ..\n   81  \n   82      it('Should should not allow method but only publish', function (done) {\n   83:         const query = DemoPublication.createQuery({\n   84              _id: 1\n   85          });\n   86  \n   87:         query.fetch((err, res) => {\n   88              assert.isDefined(err);\n   89              assert.isUndefined(res);\n   90          });\n   91  \n   92:         query.subscribe({\n   93              onReady() {\n   94                  done();\n   ..\n   99  \n  100      it('Should restrict links # restrictLinks ', function (done) {\n  101:         const query = Demo.createQuery({\n  102              _id: 1,\n  103              restrictedLink: {}\n  104          });\n  105  \n  106:         query.fetch((err, res) => {\n  107              assert.isUndefined(err);\n  108  \n  ...\n  119  \n  120      it('Should intersect the body graphs - Method', function (done) {\n  121:         const query = Intersect.createQuery({\n  122              $filters: {\n  123                  value: 'Hello'\n  ...\n  138          });\n  139  \n  140:         query.fetch((err, res) => {\n  141              assert.isUndefined(err);\n  142              assert.lengthOf(res, 1);\n  ...\n  158  \n  159      it('Should intersect the body graphs - Subscription', function (done) {\n  160:         const query = Intersect.createQuery({\n  161              $filters: {\n  162                  value: 'Hello'\n  ...\n  177          });\n  178  \n  179:         const handle = query.subscribe();\n  180  \n  181          Tracker.autorun((c) => {\n  182              if (handle.ready()) {\n  183                  c.stop();\n  184:                 const res = query.fetch();\n  185  \n  186                  assert.lengthOf(res, 1);\n\n/home/simon/Desktop/testing/packages/grapher/lib/exposure/testing/units/units.js:\n    4  import { cleanOptions, cleanFilters } from '../../lib/cleanSelectors.js';\n    5  import enforceMaxDepth, {getDepth} from '../../lib/enforceMaxDepth.js';\n    6: import CollectionNode from '../../../query/nodes/collectionNode.js';\n    7  \n    8  describe('Unit Tests', function () {\n\n/home/simon/Desktop/testing/packages/grapher/lib/namedQuery/README.md:\n    1: A secure query is a query in which the form of it is locked on the server.\n    2  Frozen queries are regarded as trusted code, the exposure from other collections will not affect them.\n    3  Only the firewall.\n    .\n    9  - It gets hard to validate/invalidate fields links.\n   10  \n   11: This is the reason why you should construct your secure query and offer control over it via params. That can be used and manipulated in $filter function.\n   12  \n   13  \n   14  ```\n   15  \n   16: const query = createNamedQuery('testList', {\n   17      tests: {\n   18          $filter({\n   ..\n   34  ```\n   35  // In the same file or in a server-side file only:\n   36: query.expose({\n   37      firewall(userId, params) {\n   38           // throw exception if not allowed \n   ..\n   49  // You must have your collections and queries imported already.\n   50  // Client side\n   51: createQuery({\n   52:     testListQuery: {\n   53          endcustomer: Meteor.userId()\n   54      }\n\n/home/simon/Desktop/testing/packages/grapher/lib/namedQuery/_createNamedQuery.js:\n    1: import createQuery from '../query/createQuery.js'\n    2  \n    3  export default (...args) => {\n    4:     console.warn('createNamedQuery is deprecated. Functionality has been moved over to createQuery');\n    5:     return createQuery(...args);\n    6  }\n    7  \n\n/home/simon/Desktop/testing/packages/grapher/lib/namedQuery/_extension.js:\n    1: import createQuery from '../query/createQuery.js';\n    2  \n    3  _.extend(Mongo.Collection.prototype, {\n    4:     createNamedQuery(...args) {\n    5:       console.warn('createNamedQuery is deprecated. Functionality has been moved over to createQuery');\n    6:       return this.createQuery(...args);\n    7      }\n    8  });\n\n/home/simon/Desktop/testing/packages/grapher/lib/namedQuery/namedQuery.base.js:\n    1: import deepClone from '../query/lib/deepClone.js';\n    2  \n    3: export default class NamedQueryBase {\n    4      constructor(name, collection, body, params = {}) {\n    5:         this.queryName = name;\n    6  \n    7          this.body = deepClone(body);\n    .\n   15  \n   16      get name() {\n   17:         return `named_query_${this.queryName}`;\n   18      }\n   19  \n   ..\n   26      clone(newParams) {\n   27          return new this.constructor(\n   28:             this.queryName,\n   29              this.collection,\n   30              deepClone(this.body),\n\n/home/simon/Desktop/testing/packages/grapher/lib/namedQuery/namedQuery.client.js:\n    1: import createGraph from '../query/lib/createGraph.js';\n    2: import recursiveFetch from '../query/lib/recursiveFetch.js';\n    3: import prepareForProcess from '../query/lib/prepareForProcess.js';\n    4  import { _ } from 'meteor/underscore';\n    5: import callWithPromise from '../query/lib/callWithPromise';\n    6: import Base from './namedQuery.base';\n    7  \n    8  export default class extends Base {\n    .\n   40      async fetchSync() {\n   41          if (this.subscriptionHandle) {\n   42:             throw new Meteor.Error('This query is reactive, meaning you cannot use promises to fetch the data.');\n   43          }\n   44  \n\n/home/simon/Desktop/testing/packages/grapher/lib/namedQuery/namedQuery.js:\n    1: import NamedQueryClient from './namedQuery.client';\n    2: import NamedQueryServer from './namedQuery.server';\n    3  \n    4: let NamedQuery;\n    5  \n    6  if (Meteor.isServer) {\n    7:     NamedQuery = NamedQueryServer;\n    8  } else {\n    9:     NamedQuery = NamedQueryClient;\n   10  }\n   11  \n   12: export default NamedQuery;\n\n/home/simon/Desktop/testing/packages/grapher/lib/namedQuery/namedQuery.server.js:\n    1: import prepareForProcess from '../query/lib/prepareForProcess.js';\n    2: import deepClone from '../query/lib/deepClone.js';\n    3: import Base from './namedQuery.base';\n    4  \n    5  export default class extends Base {\n    .\n    9       */\n   10      fetch() {\n   11:         const query = this.collection.createQuery(\n   12              deepClone(this.body),\n   13              deepClone(this.params)\n   14          );\n   15  \n   16:         return query.fetch();\n   17      }\n   18  \n\n/home/simon/Desktop/testing/packages/grapher/lib/namedQuery/store.js:\n    6      add(key, value) {\n    7          if (this.storage[key]) {\n    8:             throw new Meteor.Error('invalid-name', `You have previously defined another namedQuery with the same name: \"${key}\". Named Query names should be unique.`);\n    9          }\n   10  \n\n/home/simon/Desktop/testing/packages/grapher/lib/namedQuery/expose/extension.js:\n    1: import NamedQuery from '../namedQuery.js';\n    2  import ExposeSchema from './schema.js';\n    3  import mergeDeep from './lib/mergeDeep.js';\n    4: import createGraph from '../../query/lib/createGraph.js';\n    5: import recursiveCompose from '../../query/lib/recursiveCompose.js';\n    6: import prepareForProcess from '../../query/lib/prepareForProcess.js';\n    7: import deepClone from '../../query/lib/deepClone.js';\n    8  \n    9: _.extend(NamedQuery.prototype, {\n   10      expose(config = {}) {\n   11          if (!Meteor.isServer) {\n   ..\n   14  \n   15          if (this.isExposed) {\n   16:             throw new Meteor.Error('query-already-exposed', `You have already exposed: \"${this.name}\" named query`);\n   17          }\n   18  \n   ..\n   29  \n   30          if (!config.method && !config.publication) {\n   31:             throw new Meteor.Error('weird', 'If you want to expose your named query you need to specify at least one of [\"method\", \"publication\"] options to true')\n   32          }\n   33  \n   ..\n  103                      (new SimpleSchema(this.exposeConfig.schema)).validate(params);\n  104                  } catch (validationError) {\n  105:                     console.error(`Invalid parameters supplied to query ${this.queryName}`, validationError);\n  106                      throw validationError; // rethrow\n  107                  }\n\n/home/simon/Desktop/testing/packages/grapher/lib/namedQuery/testing/client.test.js:\n    1  import postListExposure from './bootstrap/queries/postListExposure.js';\n    2: import { createQuery } from 'meteor/cultofcoders:grapher';\n    3  \n    4: describe('Named Query', function () {\n    5      it('Should return proper values', function (done) {\n    6:         const query = createQuery({\n    7              postListExposure: {\n    8                  title: 'User Post - 3'\n    .\n   10          });\n   11  \n   12:         query.fetch((err, res) => {\n   13              assert.isUndefined(err);\n   14              assert.isTrue(res.length > 0);\n   ..\n   24      });\n   25  \n   26:     it('Should return proper values using query directly via import', function (done) {\n   27:         const query = postListExposure.clone({title: 'User Post - 3'});\n   28  \n   29:         query.fetch((err, res) => {\n   30              assert.isUndefined(err);\n   31              assert.isTrue(res.length > 0);\n   ..\n   42  \n   43      it('Should work with count', function (done) {\n   44:         const query = postListExposure.clone({title: 'User Post - 3'});\n   45  \n   46:         query.getCount((err, res) => {\n   47              assert.equal(6, res);\n   48              done();\n   ..\n   51  \n   52      it('Should work with reactive queries', function (done) {\n   53:         const query = createQuery({\n   54              postListExposure: {\n   55                  title: 'User Post - 3'\n   ..\n   57          });\n   58  \n   59:         const handle = query.subscribe();\n   60  \n   61          Tracker.autorun(c => {\n   62              if (handle.ready()) {\n   63                  c.stop();\n   64:                 const res = query.fetch();\n   65                  handle.stop();\n   66  \n   ..\n   79  \n   80      it('Should work with reactive queries via import', function (done) {\n   81:         const query = postListExposure.clone({\n   82              title: 'User Post - 3'\n   83          });\n   84  \n   85:         const handle = query.subscribe();\n   86  \n   87          Tracker.autorun(c => {\n   88              if (handle.ready()) {\n   89                  c.stop();\n   90:                 const res = query.fetch();\n   91                  handle.stop();\n   92  \n\n/home/simon/Desktop/testing/packages/grapher/lib/namedQuery/testing/server.test.js:\n    1  import { postList } from './bootstrap/server.js';\n    2: import { createQuery } from 'meteor/cultofcoders:grapher';\n    3  \n    4: describe('Named Query', function () {\n    5      it('Should return the proper values', function () {\n    6:         const createdQuery = createQuery({\n    7              postList: {\n    8                  title: 'User Post - 3'\n    .\n   10          });\n   11  \n   12:         const directQuery = postList.clone({\n   13              title: 'User Post - 3'\n   14          });\n   15  \n   16:         _.each([createdQuery, directQuery], (query) => {\n   17:             const data = query.fetch();\n   18  \n   19              assert.isTrue(data.length > 1);\n   ..\n   28  \n   29      it('Exposure embodyment should work properly', function () {\n   30:         const query = createQuery({\n   31              postListExposure: {\n   32                  title: 'User Post - 3'\n   ..\n   34          });\n   35  \n   36:         const data = query.fetch();\n   37  \n   38          assert.isTrue(data.length > 1);\n\n/home/simon/Desktop/testing/packages/grapher/lib/namedQuery/testing/bootstrap/server.js:\n    1: import { createNamedQuery } from 'meteor/cultofcoders:grapher';\n    2  import postListExposure from './queries/postListExposure.js';\n    3  \n    4: const postList = createNamedQuery('postList', {\n    5      posts: {\n    6          $filter({filters, params}) {\n\n/home/simon/Desktop/testing/packages/grapher/lib/namedQuery/testing/bootstrap/queries/postListExposure.js:\n    1: import { createNamedQuery } from 'meteor/cultofcoders:grapher';\n    2  \n    3: export default createNamedQuery('postListExposure', {\n    4      posts: {\n    5          title: 1,\n\n/home/simon/Desktop/testing/packages/grapher/lib/query/createQuery.js:\n    1: import Query from './query.js';\n    2: import NamedQuery from '../namedQuery/namedQuery.js';\n    3: import NamedQueryStore from '../namedQuery/store.js';\n    4  \n    5  export default (...args) => {\n    .\n    7      let body;\n    8      let rest;\n    9:     if (typeof args[0] == 'string') { //NamedQuery\n   10          name = args[0];\n   11          body = args[1];\n   12          rest = args.slice(2)\n   13:     } else { //Query\n   14          body = args[0];\n   15          rest = args.slice(1)\n   ..\n   17  \n   18      if (_.keys(body).length > 1) {\n   19:         throw new Meteor.Error('invalid-query', 'When using createQuery you should only have one main root point that represents the collection name.')\n   20      }\n   21  \n   ..\n   24      const collection = Mongo.Collection.get(entryPointName);\n   25      if (!collection) {\n   26:         if (name) { //is a NamedQuery\n   27              throw new Meteor.Error('invalid-name', `We could not find any collection with the name \"${entryPointName}\". Make sure it is imported prior to using this`)\n   28          }\n   29:         const namedQuery = NamedQueryStore.get(entryPointName);\n   30  \n   31:         if (!namedQuery) {\n   32:             throw new Meteor.Error('entry-point-not-found', `We could not find any collection or named query with the name \"${entryPointName}\". Make sure you have them loaded in the environment you are executing *createQuery*`)\n   33          } else {\n   34:             return namedQuery.clone(body[entryPointName], ...rest);\n   35          }\n   36      }\n   37  \n   38      if (name) {\n   39:         const query = new NamedQuery(name, collection, body[entryPointName], ...rest);\n   40:         NamedQueryStore.add(name, query);\n   41          \n   42:         return query;\n   43      } else {\n   44:         return new Query(collection, body[entryPointName], ...rest);\n   45      }\n   46  }\n\n/home/simon/Desktop/testing/packages/grapher/lib/query/extension.js:\n    1: import Query from './query.js';\n    2  \n    3  _.extend(Mongo.Collection.prototype, {\n    4:     createQuery(...args) {\n    5:       if (args[0] == 'string') { //NamedQuery\n    6          const name = args[0];\n    7          const body = args[1];\n    8          const params = args[2];\n    9  \n   10:         const query = new NamedQuery(name, this, body, params);\n   11:         NamedQueryStore.add(name, query);\n   12          \n   13:         return query;\n   14:       } else { //Query\n   15          const body = args[0];\n   16          const params = args[1];\n   17  \n   18:         return new Query(this, body, params);\n   19        }\n   20      }\n\n/home/simon/Desktop/testing/packages/grapher/lib/query/query.base.js:\n    1  import deepClone from './lib/deepClone.js';\n    2  \n    3: export default class QueryBase {\n    4      constructor(collection, body, params = {}) {\n    5          this.collection = collection;\n    .\n   31       *\n   32       * @param data\n   33:      * @returns {Query}\n   34       */\n   35      setParams(data) {\n\n/home/simon/Desktop/testing/packages/grapher/lib/query/query.client.js:\n    4  import prepareForProcess from './lib/prepareForProcess.js';\n    5  import callWithPromise from './lib/callWithPromise';\n    6: import Base from './query.base';\n    7  \n    8: export default class Query extends Base {\n    9      /**\n   10       * Subscribe\n   ..\n   40      async fetchSync() {\n   41          if (this.subscriptionHandle) {\n   42:             throw new Meteor.Error('This query is reactive, meaning you cannot use promises to fetch the data.');\n   43          }\n   44  \n\n/home/simon/Desktop/testing/packages/grapher/lib/query/query.js:\n    1: import QueryClient from './query.client';\n    2: import QueryServer from './query.server';\n    3  \n    4: let Query;\n    5  \n    6  if (Meteor.isServer) {\n    7:     Query = QueryServer;\n    8  } else {\n    9:     Query = QueryClient;\n   10  }\n   11  \n   12: export default Query;\n\n/home/simon/Desktop/testing/packages/grapher/lib/query/query.server.js:\n    2  import prepareForProcess from './lib/prepareForProcess.js';\n    3  import hypernova from './hypernova/hypernova.js';\n    4: import Base from './query.base';\n    5  \n    6: export default class Query extends Base {\n    7      /**\n    8       * Retrieves the data.\n\n/home/simon/Desktop/testing/packages/grapher/lib/query/testing/client.test.js:\n    1: import { createQuery } from 'meteor/cultofcoders:grapher';\n    2  import './units/deepClone';\n    3  import './reducers.client.test';\n    .\n    5  import waitForHandleToBeReady from './lib/waitForHandleToBeReady';\n    6  \n    7: describe('Query Client Tests', function () {\n    8      it('Should work with queries via method call', function (done) {\n    9:         const query = createQuery({\n   10              posts: {\n   11                  $options: {limit: 5},\n   ..\n   18          });\n   19  \n   20:         query.fetch((err, res) => {\n   21              assert.isUndefined(err);\n   22  \n   ..\n   36  \n   37      it('Should work with queries reactively', function (done) {\n   38:         const query = createQuery({\n   39              posts: {\n   40                  $options: {limit: 5},\n   ..\n   47          });\n   48  \n   49:         const handle = query.subscribe();\n   50  \n   51          Tracker.autorun(c => {\n   ..\n   53                  c.stop();\n   54  \n   55:                 const res = query.fetch();\n   56  \n   57                  assert.isArray(res);\n   ..\n   73  \n   74      it('Should fetch direct One links with $metadata via Subscription', function (done) {\n   75:         let query = createQuery({\n   76              posts: {\n   77                  group: {\n   ..\n   81          });\n   82  \n   83:         let handle = query.subscribe();\n   84          Tracker.autorun((c) => {\n   85              if (handle.ready()) {\n   86                  c.stop();\n   87:                 let data = query.fetch();\n   88  \n   89                  handle.stop();\n   ..\n  100  \n  101      it('Should fetch direct Many links with $metadata via Subscription', function (done) {\n  102:         let query = createQuery({\n  103              authors: {\n  104                  groups: {\n  ...\n  109          });\n  110  \n  111:         let handle = query.subscribe();\n  112          Tracker.autorun((c) => {\n  113              if (handle.ready()) {\n  114                  c.stop();\n  115:                 let data = query.fetch();\n  116  \n  117                  handle.stop();\n  ...\n  131  \n  132      it('Should fetch Inversed One Meta links with $metadata via Subscription', function (done) {\n  133:         let query = createQuery({\n  134              groups: {\n  135                  posts: {\n  ...\n  139          });\n  140  \n  141:         let handle = query.subscribe();\n  142  \n  143          Tracker.autorun((c) => {\n  ...\n  145                  c.stop();\n  146  \n  147:                 let data = query.fetch();\n  148                  handle.stop();\n  149  \n  ...\n  162  \n  163      it('Should fetch Inversed Many Meta links with $metadata via Subscription', function (done) {\n  164:         let query = createQuery({\n  165              groups: {\n  166                  authors: {\n  ...\n  171          });\n  172  \n  173:         let handle = query.subscribe();\n  174  \n  175          Tracker.autorun((c) => {\n  ...\n  177                  c.stop();\n  178  \n  179:                 let data = query.fetch();\n  180  \n  181                  _.each(data, group => {\n  ...\n  192  \n  193      it('Should work with promises', async function () {\n  194:         let query = createQuery({\n  195              groups: {\n  196                  posts: {\n  ...\n  200          });\n  201  \n  202:         let result = await query.fetchSync();\n  203  \n  204          assert.isArray(result);\n  ...\n  209          });\n  210  \n  211:         result = await query.fetchOneSync();\n  212  \n  213          assert.isObject(result);\n  ...\n  215          assert.isArray(result.posts);\n  216  \n  217:         result = await query.getCountSync();\n  218  \n  219          assert.isNumber(result);\n  ...\n  221  \n  222      it('Should work with fetchOne', async function (done) {\n  223:         let query = createQuery({\n  224              groups: {\n  225                  posts: {\n  ...\n  229          });\n  230  \n  231:         query.fetchOne((err, group) => {\n  232              assert.isNotArray(group);\n  233              assert.isObject(group);\n  ...\n  239  \n  240      it('Should work sorting with options that contain a dot', function () {\n  241:         let query = createQuery({\n  242              posts: {\n  243                  author: {\n  ...\n  252          });\n  253  \n  254:         query.fetch((err, data) => {\n  255              assert.isArray(data);\n  256          })\n  ...\n  258  \n  259      it('Should properly clone and work with setParams', function () {\n  260:         let query = createQuery({\n  261              posts: {\n  262                  $options: {limit: 5}\n  ...\n  264          });\n  265  \n  266:         let clone = query.clone({});\n  267  \n  268          assert.isFunction(clone.fetch);\n\n/home/simon/Desktop/testing/packages/grapher/lib/query/testing/metaFilters.server.test.js:\n    1: import { createQuery } from 'meteor/cultofcoders:grapher';\n    2  \n    3  describe('Hypernova - $meta filters', function () {\n    4      it('Should work with $meta filters - One Meta Direct', function () {\n    5:         const data = createQuery({\n    6              posts: {\n    7                  group: {\n    .\n   15          const random = post.group.$metadata.random;\n   16  \n   17:         let posts = createQuery({\n   18              posts: {\n   19                  $filters: {_id: post._id},\n   ..\n   29          assert.isObject(posts[0].group);\n   30  \n   31:         posts = createQuery({\n   32              posts: {\n   33                  $filters: {_id: post._id},\n   ..\n   45  \n   46      it('Should work with $meta filters - One Meta Virtual', function () {\n   47:         const data = createQuery({\n   48              groups: {\n   49                  posts: {\n   ..\n   58          assert.isDefined(random);\n   59  \n   60:         let groups = createQuery({\n   61              groups: {\n   62                  $filters: {_id: group._id},\n   ..\n   76          assert.equal(groups[0].posts[0].$metadata.random, random);\n   77  \n   78:         groups = createQuery({\n   79              groups: {\n   80                  $filters: {_id: group._id},\n   ..\n   94  \n   95      it('Should work with $meta filters - Many Meta Direct', function () {\n   96:         let data = createQuery({\n   97              authors: {\n   98                  name: 1,\n   ..\n  117          });\n  118  \n  119:         data = createQuery({\n  120              authors: {\n  121                  name: 1,\n  ...\n  142  \n  143      it('Should work with $meta filters - Many Meta Virtual', function () {\n  144:         let data = createQuery({\n  145              groups: {\n  146                  name: 1,\n  ...\n  165          });\n  166  \n  167:         data = createQuery({\n  168              groups: {\n  169                  name: 1,\n\n/home/simon/Desktop/testing/packages/grapher/lib/query/testing/reducers.client.test.js:\n    1: import { createQuery } from 'meteor/cultofcoders:grapher';\n    2  import waitForHandleToBeReady from './lib/waitForHandleToBeReady';\n    3  \n    4  describe('Client-side reducers', function () {\n    5      it('Should work with field only reducers', async function () {\n    6:         const query = createQuery({\n    7              authors: {\n    8                  fullName: 1\n    .\n   10          });\n   11  \n   12:         let handle = query.subscribe();\n   13          await waitForHandleToBeReady(handle);\n   14:         const data = query.fetch();\n   15  \n   16          assert.isTrue(data.length > 0);\n   ..\n   26  \n   27      it('Should work with nested fields reducers', async function () {\n   28:         const query = createQuery({\n   29              authors: {\n   30                  fullNameNested: 1\n   ..\n   32          });\n   33  \n   34:         let handle = query.subscribe();\n   35          await waitForHandleToBeReady(handle);\n   36:         const data = query.fetch();\n   37  \n   38          assert.isTrue(data.length > 0);\n   ..\n   49  \n   50      it('Should work with nested fields reducers', async function () {\n   51:         const query = createQuery({\n   52              authors: {\n   53                  profile: {\n   ..\n   58          });\n   59  \n   60:         let handle = query.subscribe();\n   61          await waitForHandleToBeReady(handle);\n   62:         const data = query.fetch();\n   63  \n   64          assert.isTrue(data.length > 0);\n   ..\n   77  \n   78      it('Should work with links reducers', async function () {\n   79:         const query = createQuery({\n   80              authors: {\n   81                  groupNames: 1\n   ..\n   83          });\n   84  \n   85:         let handle = query.subscribe();\n   86          await waitForHandleToBeReady(handle);\n   87:         const data = query.fetch();\n   88  \n   89          assert.isTrue(data.length > 0);\n   ..\n   98  \n   99      it('Should work with links and nested reducers', async function () {\n  100:         const query = createQuery({\n  101              authors: {\n  102                  referenceReducer: 1\n  ...\n  104          });\n  105  \n  106:         let handle = query.subscribe();\n  107          await waitForHandleToBeReady(handle);\n  108:         const data = query.fetch();\n  109  \n  110          assert.isTrue(data.length > 0);\n  ...\n  120  \n  121      it('Should not clean nested reducers if not specified', async function () {\n  122:         const query = createQuery({\n  123              authors: {\n  124                  referenceReducer: 1,\n  ...\n  127          });\n  128  \n  129:         let handle = query.subscribe();\n  130          await waitForHandleToBeReady(handle);\n  131:         const data = query.fetch();\n  132  \n  133          assert.isTrue(data.length > 0);\n  ...\n  142  \n  143      it('Should keep previously used items - Part 1', async function () {\n  144:         const query = createQuery({\n  145              authors: {\n  146                  fullName: 1,\n  ...\n  153          });\n  154  \n  155:         let handle = query.subscribe();\n  156          await waitForHandleToBeReady(handle);\n  157:         const data = query.fetch();\n  158  \n  159          assert.isTrue(data.length > 0);\n  ...\n  171  \n  172      it('Should keep previously used items - Part 2', async function () {\n  173:         const query = createQuery({\n  174              authors: {\n  175                  groupNames: 1,\n  ...\n  180          });\n  181  \n  182:         let handle = query.subscribe();\n  183          await waitForHandleToBeReady(handle);\n  184:         const data = query.fetch();\n  185  \n  186          assert.isTrue(data.length > 0);\n\n/home/simon/Desktop/testing/packages/grapher/lib/query/testing/reducers.server.test.js:\n    1: import { createQuery } from 'meteor/cultofcoders:grapher';\n    2  \n    3  describe('Reducers', function () {\n    4      it('Should work with field only reducers', function () {\n    5:         const data = createQuery({\n    6              authors: {\n    7                  fullName: 1\n    .\n   19  \n   20      it('Should work with nested fields reducers', function () {\n   21:         const data = createQuery({\n   22              authors: {\n   23                  fullNameNested: 1\n   ..\n   36  \n   37      it('Should work with nested fields reducers', function () {\n   38:         const data = createQuery({\n   39              authors: {\n   40                  profile: {\n   ..\n   58  \n   59      it('Should work with links reducers', function () {\n   60:         const data = createQuery({\n   61              authors: {\n   62                  groupNames: 1\n   ..\n   73  \n   74      it('Should work with links and nested reducers', function () {\n   75:         const data = createQuery({\n   76              authors: {\n   77                  referenceReducer: 1\n   ..\n   89  \n   90      it('Should not clean nested reducers if not specified', function () {\n   91:         const data = createQuery({\n   92              authors: {\n   93                  referenceReducer: 1,\n   ..\n  105  \n  106      it('Should keep previously used items - Part 1', function () {\n  107:         const data = createQuery({\n  108              authors: {\n  109                  fullName: 1,\n  ...\n  128  \n  129      it('Should keep previously used items - Part 2', function () {\n  130:         const data = createQuery({\n  131              authors: {\n  132                  groupNames: 1,\n\n/home/simon/Desktop/testing/packages/grapher/lib/query/testing/security.client.test.js:\n    1: import { createQuery } from 'meteor/cultofcoders:grapher';\n    2  import waitForHandleToBeReady from './lib/waitForHandleToBeReady';\n    3  \n    4: describe('Query Security Client Tests', function () {\n    5:     it('Should not retrieve subitems with reactive and non-reactive query', async function () {\n    6:         const query = createQuery({\n    7              security_items: {\n    8                  text: 1,\n    .\n   13          });\n   14  \n   15:         const handle = query.subscribe();\n   16  \n   17          await waitForHandleToBeReady(handle);\n   18  \n   19:         const data = query.fetch();\n   20  \n   21          assert.lengthOf(data, 1);\n\n/home/simon/Desktop/testing/packages/grapher/lib/query/testing/server.test.js:\n    1: import { createQuery } from 'meteor/cultofcoders:grapher';\n    2  import Comments from './bootstrap/comments/collection.js';\n    3  import './units/deepClone';\n    .\n    7  describe('Hypernova', function () {\n    8      it('Should fetch One links correctly', function () {\n    9:         const data = createQuery({\n   10              comments: {\n   11                  text: 1,\n   ..\n   28  \n   29      it('Should fetch One links with limit and options', function () {\n   30:         const data = createQuery({\n   31              comments: {\n   32                  $options: {limit: 5},\n   ..\n   39  \n   40      it('Should fetch One-Inversed links with limit and options', function () {\n   41:         const query = createQuery({\n   42              authors: {\n   43                  $options: {limit: 5},\n   ..\n   50          }, {}, {debug: true});\n   51  \n   52:         const data = query.fetch();\n   53  \n   54          assert.lengthOf(data, 5);\n   ..\n   62  \n   63      it('Should fetch Many links correctly', function () {\n   64:         const data = createQuery({\n   65              posts: {\n   66                  $options: {limit: 5},\n   ..\n   81  \n   82      it('Should fetch Many - inversed links correctly', function () {\n   83:         const data = createQuery({\n   84              tags: {\n   85                  name: 1,\n   ..\n  102  \n  103      it('Should fetch One-Meta links correctly', function () {\n  104:         const data = createQuery({\n  105              posts: {\n  106                  $options: {limit: 5},\n  ...\n  123  \n  124      it('Should fetch One-Meta inversed links correctly', function () {\n  125:         const data = createQuery({\n  126              groups: {\n  127                  name: 1,\n  ...\n  145  \n  146      it('Should fetch Many-Meta links correctly', function () {\n  147:         const data = createQuery({\n  148              authors: {\n  149                  name: 1,\n  ...\n  168  \n  169      it('Should fetch Many-Meta inversed links correctly', function () {\n  170:         const data = createQuery({\n  171              groups: {\n  172                  name: 1,\n  ...\n  191  \n  192      it('Should fetch direct One & Many Meta links with $metadata', function () {\n  193:         let data = createQuery({\n  194              posts: {\n  195                  group: {\n  ...\n  204          });\n  205  \n  206:         data = createQuery({\n  207              authors: {\n  208                  groups: {\n  ...\n  223  \n  224      it('Should fetch Inversed One & Many Meta links with $metadata', function () {\n  225:         let data = createQuery({\n  226              groups: {\n  227                  posts: {\n  ...\n  239          });\n  240  \n  241:         data = createQuery({\n  242              groups: {\n  243                  authors: {\n  ...\n  256  \n  257      it('Should fetch Resolver links properly', function () {\n  258:         const data = createQuery({\n  259              posts: {\n  260                  $options: {limit: 5},\n  ...\n  270  \n  271      it('Should fetch in depth properly at any given level.', function () {\n  272:         const data = createQuery({\n  273              authors: {\n  274                  $options: {limit: 5},\n  ...\n  313  \n  314      it('Should work with filters of $and and $or on subcollections', function () {\n  315:         let data = createQuery({\n  316              posts: {\n  317                  comments: {\n  ...\n  338  \n  339      it('Should work sorting with options that contain a dot', function () {\n  340:         let data = createQuery({\n  341              posts: {\n  342                  author: {\n  ...\n  355  \n  356      it('Should properly clone and work with setParams', function () {\n  357:         let query = createQuery({\n  358              posts: {\n  359                  $options: {limit: 5}\n  ...\n  361          });\n  362  \n  363:         let clone = query.clone({});\n  364  \n  365          assert.isFunction(clone.fetch);\n  ...\n  370  \n  371      it('Should work with $postFilters', function () {\n  372:         let query = createQuery({\n  373              posts: {\n  374                  $postFilters: {\n  ...\n  382          });\n  383  \n  384:         const data = query.fetch();\n  385          assert.lengthOf(data, 0);\n  386  \n  387:         query = createQuery({\n  388              posts: {\n  389                  $postFilters: {\n  ...\n  397          });\n  398  \n  399:         assert.isTrue(query.fetch().length > 0);\n  400      })\n  401  \n  402      it('Should work with $postOptions', function () {\n  403:         let query = createQuery({\n  404              posts: {\n  405                  $postOptions: {\n  ...\n  415          });\n  416  \n  417:         const data = query.fetch();\n  418          assert.lengthOf(data, 5);\n  419      })\n\n/home/simon/Desktop/testing/packages/grapher-vue/README.md:\n    3  This package makes using [Grapher](http://grapher.cultofcoders.com/) with [Vue](https://vuejs.org/) in [Meteor](https://www.meteor.com/) easy. It automatically subscribes to your queries when the component is loaded, and unsubscribes to them when the component is destroyed.\n    4  \n    5: Query paramaters are reactive, using Vue's reactivity. If you for example use `this.limit` in your query, and `this.limit` changes, it will update the query and subscription. If you want to turn this off, add `reactive:false`.\n    6  \n    7  You can also fetch data nonreactively, by adding `subscribe:false`. It uses the same result structure as the subscribe version. It will first return an object `{ready:false,data:[]}`. Once it finishes, the object will be updated with the results.\n    .\n   43          return {\n   44            collection:Meteor.users,\n   45:           query:{ //These are the paramaters passed to collection.createQuery()\n   46              username:1,\n   47              profile:1,\n   ..\n   64    count: Number, //Number of results\n   65    time: Number, //How many milliseconds it took until it was ready\n   66:   data: Array //The result of the query\n   67  }\n   68  ```\n\n/home/simon/Desktop/testing/packages/grapher-vue/grapher-vue.js:\n   17  \t\t\t\t\t\tlet readyOnce = false\n   18  \t\t\t\t\t\tlet nonreactive\n   19: \t\t\t\t\t\t//Run this function once, and every time the query parameters change\n   20  \t\t\t\t\t\tlet unwatch = this.$watch(fn, params => {\n   21  \t\t\t\t\t\t\tif(typeof params !== 'object'){\n   ..\n   24  \t\t\t\t\t\t\tnonreactive = params.reactive === false\n   25  \t\t\t\t\t\t\tlet start = new Date(), time\n   26: \t\t\t\t\t\t\tif(!this._grapher[name]){ //Create the query\n   27: \t\t\t\t\t\t\t\tthis._grapher[name] = params.collection.createQuery(params.query)\n   28  \t\t\t\t\t\t\t}\n   29: \t\t\t\t\t\t\tlet query = this._grapher[name]\n   30: \t\t\t\t\t\t\tquery.body = params.query\n   31  \t\t\t\t\t\t\tif(params.single){\n   32: \t\t\t\t\t\t\t\tif(!query.body.$options){\n   33: \t\t\t\t\t\t\t\t\tquery.body.$options = {}\n   34  \t\t\t\t\t\t\t\t}\n   35: \t\t\t\t\t\t\t\tquery.body.$options.limit = 1\n   36  \t\t\t\t\t\t\t}\n   37  \t\t\t\t\t\t\tif(params.subscribe === false){ //\"Method style\" fetch\n   38: \t\t\t\t\t\t\t\tif(query.subscriptionHandle){ //Handle switching from subscription-based\n   39  \t\t\t\t\t\t\t\t\tthis.$stopHandle(computation)\n   40: \t\t\t\t\t\t\t\t\tquery.unsubscribe()\n   41  \t\t\t\t\t\t\t\t}\n   42  \t\t\t\t\t\t\t\tthis[name].ready = false \n   43: \t\t\t\t\t\t\t\tquery.fetch((err,result) => {\n   44  \t\t\t\t\t\t\t\t\tif(err){\n   45  \t\t\t\t\t\t\t\t\t\tconsole.err(err)\n   ..\n   58  \t\t\t\t\t\t\t\t})\n   59  \t\t\t\t\t\t\t} else { //Subscribe and fetch\n   60: \t\t\t\t\t\t\t\tlet oldSub = query.subscriptionHandle\n   61: \t\t\t\t\t\t\t\tquery.subscribe()\n   62  \t\t\t\t\t\t\t\tif(oldSub){\n   63  \t\t\t\t\t\t\t\t\toldSub.stop()\n   ..\n   69  \t\t\t\t\t\t\t\t}\n   70  \t\t\t\t\t\t\t\tcomputation = this.$autorun(()=>{\n   71: \t\t\t\t\t\t\t\t\tif(!query.subscriptionHandle){\n   72  \t\t\t\t\t\t\t\t\t\treturn\n   73  \t\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\n   74: \t\t\t\t\t\t\t\t\tlet ready = query.subscriptionHandle.ready()\n   75  \t\t\t\t\t\t\t\t\tif(ready && !readyOnce){\n   76  \t\t\t\t\t\t\t\t\t\treadyOnce = true\n   ..\n   79  \t\t\t\t\t\t\t\t\t\ttime = new Date() - start\n   80  \t\t\t\t\t\t\t\t\t}\n   81: \t\t\t\t\t\t\t\t\tlet result = query.fetch()\n   82  \t\t\t\t\t\t\t\t\tif(params.single){\n   83  \t\t\t\t\t\t\t\t\t\tresult = result[0]\n   ..\n  100  \t\t\t},\n  101  \t\t\tdestroyed(){\n  102: \t\t\t\t_.each(this._grapher, query => query.unsubscribe())\n  103  \t\t\t\tthis._grapher = null\n  104  \t\t\t}\n\n402 matches across 40 files\n\n\nSearching 142 files for \"query\"\n\n/home/simon/Desktop/testing/client/components/grapher.vue:\n   21  \t\t</div>\n   22  \t\t<item v-else :item=\"stuff.result\"/>\n   23: \t\tQuery:\n   24: \t\t<pre>{{query}}</pre>\n   25  \t\tResult:\n   26  \t\t<pre>{{stuff}}</pre>\n   ..\n   39  \t\t\t\tselected:false,\n   40  \t\t\t\tsearch:'',\n   41: \t\t\t\tquery:{}\n   42  \t\t\t}\n   43  \t\t},\n   ..\n   52  \t\t\t\t}\n   53  \t\t\t\t\n   54: \t\t\t\tlet query = {\n   55  \t\t\t\t\tsubscribe:this.subscribe,\n   56  \t\t\t\t\tsingle:this.single,\n   57  \t\t\t\t\tcollection:Test,\n   58: \t\t\t\t\tquery:{\n   59  \t\t\t\t\t\t_id:1,\n   60  \t\t\t\t\t\tcolor:1,\n   ..\n   71  \n   72  \t\t\t\t//Create the JSON display\n   73: \t\t\t\tlet display = _.clone(query)\n   74  \t\t\t\tdisplay.collection = display.collection._name\n   75: \t\t\t\tthis.query = Object.freeze(display)\n   76  \n   77: \t\t\t\treturn query\n   78  \t\t\t}\n   79  \t\t}\n\n/home/simon/Desktop/testing/client/components/infinite.vue:\n   22  \t\t\t\treturn {\n   23  \t\t\t\t\tcollection:Test,\n   24: \t\t\t\t\tquery:{\n   25  \t\t\t\t\t\t_id:1,\n   26  \t\t\t\t\t\tcolor:1,\n\n/home/simon/Desktop/testing/packages/grapher/CHANGELOG.md:\n    2  - Support for promises via .fetchSync and .fetchOneSync for client-side queries\n    3  - Support for autoremove from inverse side as well\n    4: - Fixed .fetchOne from client-side Query\n    5  \n    6  ## 1.2.4\n    .\n   45  \n   46  ## 1.1.9\n   47: - Added .clone() to Query\n   48: - Added namedQuery concept. \n   49  - Direct meta-children are automatically appended with $metadata\n   50: - Added .fetchOne() to Query\n   51  - Modified Documentor so it returns queries also.\n   52  - Fixed bug with deep $filter() function\n   ..\n   63  \n   64  ## 1.1.4\n   65: - Decoupled query fetcher better, removing automatically \"skip\" option when fetching as client\n   66  - Ability to allow skip when you want custom behavior\n   67  \n\n/home/simon/Desktop/testing/packages/grapher/README.md:\n   60  #### Integration with React (cultofcoders:grapher-react)\n   61  \n   62: Provides you with an easy to use \"createQueryContainer\" function.\n   63  \n   64  - [Atmosphere](https://atmospherejs.com/cultofcoders/grapher-react)\n\n/home/simon/Desktop/testing/packages/grapher/main.client.js:\n    1  import './lib/links/extension.js';\n    2: import './lib/query/extension.js';\n    3: import './lib/query/reducers/extension.js';\n    4: import './lib/namedQuery/_extension.js'; //deprecated\n    5  \n    6  export {\n    7:     default as createQuery\n    8: } from './lib/query/createQuery.js';\n    9  \n   10  export {\n   11:     default as createNamedQuery\n   12: } from './lib/namedQuery/_createNamedQuery.js'; //deprecated\n   13  \n   14  export {\n   15      default as prepareForProcess\n   16: } from './lib/query/lib/prepareForProcess';\n   17  \n\n/home/simon/Desktop/testing/packages/grapher/main.server.js:\n    1  import './lib/exposure/extension.js';\n    2  import './lib/links/extension.js';\n    3: import './lib/query/extension.js';\n    4: import './lib/query/reducers/extension.js';\n    5: import './lib/namedQuery/expose/extension.js';\n    6: import './lib/namedQuery/_extension.js'; //deprecated\n    7  \n    8  export {\n    9:     default as createQuery\n   10: } from './lib/query/createQuery.js';\n   11  \n   12  export {\n   13:     default as createNamedQuery\n   14: } from './lib/namedQuery/_createNamedQuery.js'; //deprecated\n   15  \n   16  export {\n\n/home/simon/Desktop/testing/packages/grapher/package.js:\n   67      api.addFiles('lib/exposure/testing/client.js', 'client');\n   68  \n   69:     // QUERY\n   70:     api.addFiles('lib/query/testing/bootstrap/index.js');\n   71  \n   72      // When you play with tests you should comment this to make tests go faster.\n   73:     api.addFiles('lib/query/testing/bootstrap/fixtures.js', 'server');\n   74  \n   75:     api.addFiles('lib/query/testing/server.test.js', 'server');\n   76:     api.addFiles('lib/query/testing/client.test.js', 'client');\n   77  \n   78:     // NAMED QUERY\n   79:     api.addFiles('lib/namedQuery/testing/bootstrap/both.js');\n   80:     api.addFiles('lib/namedQuery/testing/bootstrap/client.js', 'client');\n   81:     api.addFiles('lib/namedQuery/testing/bootstrap/server.js', 'server');\n   82  \n   83:     api.addFiles('lib/namedQuery/testing/server.test.js', 'server');\n   84:     api.addFiles('lib/namedQuery/testing/client.test.js', 'client');\n   85  });\n   86  \n\n/home/simon/Desktop/testing/packages/grapher/lib/documentor/index.js:\n    1  import { linkStorage } from '../links/symbols.js';\n    2: import NamedQueryStore from '../namedQuery/store';\n    3: import deepClone from '../query/lib/deepClone';\n    4  \n    5  export default function extract() {\n    6      return {\n    7:         namedQueries: extractNamedQueryDocumentation(),\n    8          collections: extractCollectionDocumentation()\n    9      }\n   10  };\n   11  \n   12: function extractNamedQueryDocumentation() {\n   13:     const namedQueries = NamedQueryStore.getAll();\n   14  \n   15      let DocumentationObject = {};\n   16  \n   17:     _.each(namedQueries, namedQuery => {\n   18:         DocumentationObject[namedQuery.queryName] = {\n   19:             body: namedQuery.body,\n   20:             collection: namedQuery.collection._name,\n   21:             isExposed: namedQuery.isExposed,\n   22:             paramsSchema: (namedQuery.exposeConfig.schema)\n   23                  ?\n   24                  formatSchemaType(\n   25:                     deepClone(namedQuery.exposeConfig.schema)\n   26                  )\n   27                  : null\n\n/home/simon/Desktop/testing/packages/grapher/lib/exposure/exposure.config.schema.js:\n    1  import { SimpleSchema } from 'meteor/aldeed:simple-schema';\n    2: import createGraph from '../query/lib/createGraph.js';\n    3  \n    4  let Schema = new SimpleSchema({\n\n/home/simon/Desktop/testing/packages/grapher/lib/exposure/exposure.js:\n    1: import createGraph from '../query/lib/createGraph.js';\n    2: import recursiveCompose from '../query/lib/recursiveCompose.js';\n    3: import hypernova from '../query/hypernova/hypernova.js';\n    4  import ExposureConfigSchema from './exposure.config.schema.js';\n    5  import enforceMaxDepth from './lib/enforceMaxDepth.js';\n    6  import enforceMaxLimit from './lib/enforceMaxLimit.js';\n    7  import cleanBody from './lib/cleanBody.js';\n    8: import deepClone from '../query/lib/deepClone';\n    9  import restrictFieldsFn from './lib/restrictFields.js';\n   10  import restrictLinks from './lib/restrictLinks.js';\n   ..\n  119  \n  120      /**\n  121:      * Initializing the publication for reactive query fetching\n  122       */\n  123      initPublication() {\n\n/home/simon/Desktop/testing/packages/grapher/lib/exposure/lib/cleanBody.js:\n    1: import deepClone from '../../query/lib/deepClone';\n    2  import {cleanFilters, cleanOptions} from './cleanSelectors';\n    3: import dotize from '../../query/lib/dotize';\n    4  \n    5  /**\n\n/home/simon/Desktop/testing/packages/grapher/lib/exposure/testing/client.js:\n    8  describe('Exposure Tests', function () {\n    9      it('Should fetch only allowed data and limitations should be applied', function (done) {\n   10:         const query = Demo.createQuery({\n   11              $options: {limit: 3},\n   12              restrictedField: 1\n   13          });\n   14  \n   15:         query.fetch((err, res) => {\n   16              assert.isUndefined(err);\n   17              assert.isDefined(res);\n   ..\n   23  \n   24      it('Should not allow me to fetch the graph data, because of maxDepth', function (done) {\n   25:         const query = Demo.createQuery({\n   26              $options: {limit: 3},\n   27              restrictedField: 1,\n   ..\n   33          });\n   34  \n   35:         query.fetch((err, res) => {\n   36              assert.isUndefined(res);\n   37              assert.isDefined(err);\n   ..\n   50      });\n   51  \n   52:     it('Should return the correct count via query', function (done) {\n   53:         const query = Demo.createQuery({\n   54              $options: {limit: 1}\n   55          });\n   56  \n   57:         query.getCount(function (err, res) {\n   58              assert.isUndefined(err);\n   59  \n   ..\n   64  \n   65      it('Should should not allow publish but only method', function (done) {\n   66:         const query = DemoMethod.createQuery({\n   67              _id: 1\n   68          });\n   69  \n   70:         query.fetch((err, res) => {\n   71              assert.isUndefined(err);\n   72              assert.isDefined(res);\n   73          });\n   74  \n   75:         const handler = query.subscribe({\n   76              onStop(e) {\n   77                  done();\n   ..\n   81  \n   82      it('Should should not allow method but only publish', function (done) {\n   83:         const query = DemoPublication.createQuery({\n   84              _id: 1\n   85          });\n   86  \n   87:         query.fetch((err, res) => {\n   88              assert.isDefined(err);\n   89              assert.isUndefined(res);\n   90          });\n   91  \n   92:         query.subscribe({\n   93              onReady() {\n   94                  done();\n   ..\n   99  \n  100      it('Should restrict links # restrictLinks ', function (done) {\n  101:         const query = Demo.createQuery({\n  102              _id: 1,\n  103              restrictedLink: {}\n  104          });\n  105  \n  106:         query.fetch((err, res) => {\n  107              assert.isUndefined(err);\n  108  \n  ...\n  119  \n  120      it('Should intersect the body graphs - Method', function (done) {\n  121:         const query = Intersect.createQuery({\n  122              $filters: {\n  123                  value: 'Hello'\n  ...\n  138          });\n  139  \n  140:         query.fetch((err, res) => {\n  141              assert.isUndefined(err);\n  142              assert.lengthOf(res, 1);\n  ...\n  158  \n  159      it('Should intersect the body graphs - Subscription', function (done) {\n  160:         const query = Intersect.createQuery({\n  161              $filters: {\n  162                  value: 'Hello'\n  ...\n  177          });\n  178  \n  179:         const handle = query.subscribe();\n  180  \n  181          Tracker.autorun((c) => {\n  182              if (handle.ready()) {\n  183                  c.stop();\n  184:                 const res = query.fetch();\n  185  \n  186                  assert.lengthOf(res, 1);\n\n/home/simon/Desktop/testing/packages/grapher/lib/exposure/testing/units/units.js:\n    4  import { cleanOptions, cleanFilters } from '../../lib/cleanSelectors.js';\n    5  import enforceMaxDepth, {getDepth} from '../../lib/enforceMaxDepth.js';\n    6: import CollectionNode from '../../../query/nodes/collectionNode.js';\n    7  \n    8  describe('Unit Tests', function () {\n\n/home/simon/Desktop/testing/packages/grapher/lib/namedQuery/README.md:\n    1: A secure query is a query in which the form of it is locked on the server.\n    2  Frozen queries are regarded as trusted code, the exposure from other collections will not affect them.\n    3  Only the firewall.\n    .\n    9  - It gets hard to validate/invalidate fields links.\n   10  \n   11: This is the reason why you should construct your secure query and offer control over it via params. That can be used and manipulated in $filter function.\n   12  \n   13  \n   14  ```\n   15  \n   16: const query = createNamedQuery('testList', {\n   17      tests: {\n   18          $filter({\n   ..\n   34  ```\n   35  // In the same file or in a server-side file only:\n   36: query.expose({\n   37      firewall(userId, params) {\n   38           // throw exception if not allowed \n   ..\n   49  // You must have your collections and queries imported already.\n   50  // Client side\n   51: createQuery({\n   52:     testListQuery: {\n   53          endcustomer: Meteor.userId()\n   54      }\n\n/home/simon/Desktop/testing/packages/grapher/lib/namedQuery/_createNamedQuery.js:\n    1: import createQuery from '../query/createQuery.js'\n    2  \n    3  export default (...args) => {\n    4:     console.warn('createNamedQuery is deprecated. Functionality has been moved over to createQuery');\n    5:     return createQuery(...args);\n    6  }\n    7  \n\n/home/simon/Desktop/testing/packages/grapher/lib/namedQuery/_extension.js:\n    1: import createQuery from '../query/createQuery.js';\n    2  \n    3  _.extend(Mongo.Collection.prototype, {\n    4:     createNamedQuery(...args) {\n    5:       console.warn('createNamedQuery is deprecated. Functionality has been moved over to createQuery');\n    6:       return this.createQuery(...args);\n    7      }\n    8  });\n\n/home/simon/Desktop/testing/packages/grapher/lib/namedQuery/namedQuery.base.js:\n    1: import deepClone from '../query/lib/deepClone.js';\n    2  \n    3: export default class NamedQueryBase {\n    4      constructor(name, collection, body, params = {}) {\n    5:         this.queryName = name;\n    6  \n    7          this.body = deepClone(body);\n    .\n   15  \n   16      get name() {\n   17:         return `named_query_${this.queryName}`;\n   18      }\n   19  \n   ..\n   26      clone(newParams) {\n   27          return new this.constructor(\n   28:             this.queryName,\n   29              this.collection,\n   30              deepClone(this.body),\n\n/home/simon/Desktop/testing/packages/grapher/lib/namedQuery/namedQuery.client.js:\n    1: import createGraph from '../query/lib/createGraph.js';\n    2: import recursiveFetch from '../query/lib/recursiveFetch.js';\n    3: import prepareForProcess from '../query/lib/prepareForProcess.js';\n    4  import { _ } from 'meteor/underscore';\n    5: import callWithPromise from '../query/lib/callWithPromise';\n    6: import Base from './namedQuery.base';\n    7  \n    8  export default class extends Base {\n    .\n   40      async fetchSync() {\n   41          if (this.subscriptionHandle) {\n   42:             throw new Meteor.Error('This query is reactive, meaning you cannot use promises to fetch the data.');\n   43          }\n   44  \n\n/home/simon/Desktop/testing/packages/grapher/lib/namedQuery/namedQuery.js:\n    1: import NamedQueryClient from './namedQuery.client';\n    2: import NamedQueryServer from './namedQuery.server';\n    3  \n    4: let NamedQuery;\n    5  \n    6  if (Meteor.isServer) {\n    7:     NamedQuery = NamedQueryServer;\n    8  } else {\n    9:     NamedQuery = NamedQueryClient;\n   10  }\n   11  \n   12: export default NamedQuery;\n\n/home/simon/Desktop/testing/packages/grapher/lib/namedQuery/namedQuery.server.js:\n    1: import prepareForProcess from '../query/lib/prepareForProcess.js';\n    2: import deepClone from '../query/lib/deepClone.js';\n    3: import Base from './namedQuery.base';\n    4  \n    5  export default class extends Base {\n    .\n    9       */\n   10      fetch() {\n   11:         const query = this.collection.createQuery(\n   12              deepClone(this.body),\n   13              deepClone(this.params)\n   14          );\n   15  \n   16:         return query.fetch();\n   17      }\n   18  \n\n/home/simon/Desktop/testing/packages/grapher/lib/namedQuery/store.js:\n    6      add(key, value) {\n    7          if (this.storage[key]) {\n    8:             throw new Meteor.Error('invalid-name', `You have previously defined another namedQuery with the same name: \"${key}\". Named Query names should be unique.`);\n    9          }\n   10  \n\n/home/simon/Desktop/testing/packages/grapher/lib/namedQuery/expose/extension.js:\n    1: import NamedQuery from '../namedQuery.js';\n    2  import ExposeSchema from './schema.js';\n    3  import mergeDeep from './lib/mergeDeep.js';\n    4: import createGraph from '../../query/lib/createGraph.js';\n    5: import recursiveCompose from '../../query/lib/recursiveCompose.js';\n    6: import prepareForProcess from '../../query/lib/prepareForProcess.js';\n    7: import deepClone from '../../query/lib/deepClone.js';\n    8  \n    9: _.extend(NamedQuery.prototype, {\n   10      expose(config = {}) {\n   11          if (!Meteor.isServer) {\n   ..\n   14  \n   15          if (this.isExposed) {\n   16:             throw new Meteor.Error('query-already-exposed', `You have already exposed: \"${this.name}\" named query`);\n   17          }\n   18  \n   ..\n   29  \n   30          if (!config.method && !config.publication) {\n   31:             throw new Meteor.Error('weird', 'If you want to expose your named query you need to specify at least one of [\"method\", \"publication\"] options to true')\n   32          }\n   33  \n   ..\n  103                      (new SimpleSchema(this.exposeConfig.schema)).validate(params);\n  104                  } catch (validationError) {\n  105:                     console.error(`Invalid parameters supplied to query ${this.queryName}`, validationError);\n  106                      throw validationError; // rethrow\n  107                  }\n\n/home/simon/Desktop/testing/packages/grapher/lib/namedQuery/testing/client.test.js:\n    1  import postListExposure from './bootstrap/queries/postListExposure.js';\n    2: import { createQuery } from 'meteor/cultofcoders:grapher';\n    3  \n    4: describe('Named Query', function () {\n    5      it('Should return proper values', function (done) {\n    6:         const query = createQuery({\n    7              postListExposure: {\n    8                  title: 'User Post - 3'\n    .\n   10          });\n   11  \n   12:         query.fetch((err, res) => {\n   13              assert.isUndefined(err);\n   14              assert.isTrue(res.length > 0);\n   ..\n   24      });\n   25  \n   26:     it('Should return proper values using query directly via import', function (done) {\n   27:         const query = postListExposure.clone({title: 'User Post - 3'});\n   28  \n   29:         query.fetch((err, res) => {\n   30              assert.isUndefined(err);\n   31              assert.isTrue(res.length > 0);\n   ..\n   42  \n   43      it('Should work with count', function (done) {\n   44:         const query = postListExposure.clone({title: 'User Post - 3'});\n   45  \n   46:         query.getCount((err, res) => {\n   47              assert.equal(6, res);\n   48              done();\n   ..\n   51  \n   52      it('Should work with reactive queries', function (done) {\n   53:         const query = createQuery({\n   54              postListExposure: {\n   55                  title: 'User Post - 3'\n   ..\n   57          });\n   58  \n   59:         const handle = query.subscribe();\n   60  \n   61          Tracker.autorun(c => {\n   62              if (handle.ready()) {\n   63                  c.stop();\n   64:                 const res = query.fetch();\n   65                  handle.stop();\n   66  \n   ..\n   79  \n   80      it('Should work with reactive queries via import', function (done) {\n   81:         const query = postListExposure.clone({\n   82              title: 'User Post - 3'\n   83          });\n   84  \n   85:         const handle = query.subscribe();\n   86  \n   87          Tracker.autorun(c => {\n   88              if (handle.ready()) {\n   89                  c.stop();\n   90:                 const res = query.fetch();\n   91                  handle.stop();\n   92  \n\n/home/simon/Desktop/testing/packages/grapher/lib/namedQuery/testing/server.test.js:\n    1  import { postList } from './bootstrap/server.js';\n    2: import { createQuery } from 'meteor/cultofcoders:grapher';\n    3  \n    4: describe('Named Query', function () {\n    5      it('Should return the proper values', function () {\n    6:         const createdQuery = createQuery({\n    7              postList: {\n    8                  title: 'User Post - 3'\n    .\n   10          });\n   11  \n   12:         const directQuery = postList.clone({\n   13              title: 'User Post - 3'\n   14          });\n   15  \n   16:         _.each([createdQuery, directQuery], (query) => {\n   17:             const data = query.fetch();\n   18  \n   19              assert.isTrue(data.length > 1);\n   ..\n   28  \n   29      it('Exposure embodyment should work properly', function () {\n   30:         const query = createQuery({\n   31              postListExposure: {\n   32                  title: 'User Post - 3'\n   ..\n   34          });\n   35  \n   36:         const data = query.fetch();\n   37  \n   38          assert.isTrue(data.length > 1);\n\n/home/simon/Desktop/testing/packages/grapher/lib/namedQuery/testing/bootstrap/server.js:\n    1: import { createNamedQuery } from 'meteor/cultofcoders:grapher';\n    2  import postListExposure from './queries/postListExposure.js';\n    3  \n    4: const postList = createNamedQuery('postList', {\n    5      posts: {\n    6          $filter({filters, params}) {\n\n/home/simon/Desktop/testing/packages/grapher/lib/namedQuery/testing/bootstrap/queries/postListExposure.js:\n    1: import { createNamedQuery } from 'meteor/cultofcoders:grapher';\n    2  \n    3: export default createNamedQuery('postListExposure', {\n    4      posts: {\n    5          title: 1,\n\n/home/simon/Desktop/testing/packages/grapher/lib/query/createQuery.js:\n    1: import Query from './query.js';\n    2: import NamedQuery from '../namedQuery/namedQuery.js';\n    3: import NamedQueryStore from '../namedQuery/store.js';\n    4  \n    5  export default (...args) => {\n    .\n    7      let body;\n    8      let rest;\n    9:     if (typeof args[0] == 'string') { //NamedQuery\n   10          name = args[0];\n   11          body = args[1];\n   12          rest = args.slice(2)\n   13:     } else { //Query\n   14          body = args[0];\n   15          rest = args.slice(1)\n   ..\n   17  \n   18      if (_.keys(body).length > 1) {\n   19:         throw new Meteor.Error('invalid-query', 'When using createQuery you should only have one main root point that represents the collection name.')\n   20      }\n   21  \n   ..\n   24      const collection = Mongo.Collection.get(entryPointName);\n   25      if (!collection) {\n   26:         if (name) { //is a NamedQuery\n   27              throw new Meteor.Error('invalid-name', `We could not find any collection with the name \"${entryPointName}\". Make sure it is imported prior to using this`)\n   28          }\n   29:         const namedQuery = NamedQueryStore.get(entryPointName);\n   30  \n   31:         if (!namedQuery) {\n   32:             throw new Meteor.Error('entry-point-not-found', `We could not find any collection or named query with the name \"${entryPointName}\". Make sure you have them loaded in the environment you are executing *createQuery*`)\n   33          } else {\n   34:             return namedQuery.clone(body[entryPointName], ...rest);\n   35          }\n   36      }\n   37  \n   38      if (name) {\n   39:         const query = new NamedQuery(name, collection, body[entryPointName], ...rest);\n   40:         NamedQueryStore.add(name, query);\n   41          \n   42:         return query;\n   43      } else {\n   44:         return new Query(collection, body[entryPointName], ...rest);\n   45      }\n   46  }\n\n/home/simon/Desktop/testing/packages/grapher/lib/query/extension.js:\n    1: import Query from './query.js';\n    2  \n    3  _.extend(Mongo.Collection.prototype, {\n    4:     createQuery(...args) {\n    5:       if (args[0] == 'string') { //NamedQuery\n    6          const name = args[0];\n    7          const body = args[1];\n    8          const params = args[2];\n    9  \n   10:         const query = new NamedQuery(name, this, body, params);\n   11:         NamedQueryStore.add(name, query);\n   12          \n   13:         return query;\n   14:       } else { //Query\n   15          const body = args[0];\n   16          const params = args[1];\n   17  \n   18:         return new Query(this, body, params);\n   19        }\n   20      }\n\n/home/simon/Desktop/testing/packages/grapher/lib/query/query.base.js:\n    1  import deepClone from './lib/deepClone.js';\n    2  \n    3: export default class QueryBase {\n    4      constructor(collection, body, params = {}) {\n    5          this.collection = collection;\n    .\n   31       *\n   32       * @param data\n   33:      * @returns {Query}\n   34       */\n   35      setParams(data) {\n\n/home/simon/Desktop/testing/packages/grapher/lib/query/query.client.js:\n    4  import prepareForProcess from './lib/prepareForProcess.js';\n    5  import callWithPromise from './lib/callWithPromise';\n    6: import Base from './query.base';\n    7  \n    8: export default class Query extends Base {\n    9      /**\n   10       * Subscribe\n   ..\n   40      async fetchSync() {\n   41          if (this.subscriptionHandle) {\n   42:             throw new Meteor.Error('This query is reactive, meaning you cannot use promises to fetch the data.');\n   43          }\n   44  \n\n/home/simon/Desktop/testing/packages/grapher/lib/query/query.js:\n    1: import QueryClient from './query.client';\n    2: import QueryServer from './query.server';\n    3  \n    4: let Query;\n    5  \n    6  if (Meteor.isServer) {\n    7:     Query = QueryServer;\n    8  } else {\n    9:     Query = QueryClient;\n   10  }\n   11  \n   12: export default Query;\n\n/home/simon/Desktop/testing/packages/grapher/lib/query/query.server.js:\n    2  import prepareForProcess from './lib/prepareForProcess.js';\n    3  import hypernova from './hypernova/hypernova.js';\n    4: import Base from './query.base';\n    5  \n    6: export default class Query extends Base {\n    7      /**\n    8       * Retrieves the data.\n\n/home/simon/Desktop/testing/packages/grapher/lib/query/testing/client.test.js:\n    1: import { createQuery } from 'meteor/cultofcoders:grapher';\n    2  import './units/deepClone';\n    3  import './reducers.client.test';\n    .\n    5  import waitForHandleToBeReady from './lib/waitForHandleToBeReady';\n    6  \n    7: describe('Query Client Tests', function () {\n    8      it('Should work with queries via method call', function (done) {\n    9:         const query = createQuery({\n   10              posts: {\n   11                  $options: {limit: 5},\n   ..\n   18          });\n   19  \n   20:         query.fetch((err, res) => {\n   21              assert.isUndefined(err);\n   22  \n   ..\n   36  \n   37      it('Should work with queries reactively', function (done) {\n   38:         const query = createQuery({\n   39              posts: {\n   40                  $options: {limit: 5},\n   ..\n   47          });\n   48  \n   49:         const handle = query.subscribe();\n   50  \n   51          Tracker.autorun(c => {\n   ..\n   53                  c.stop();\n   54  \n   55:                 const res = query.fetch();\n   56  \n   57                  assert.isArray(res);\n   ..\n   73  \n   74      it('Should fetch direct One links with $metadata via Subscription', function (done) {\n   75:         let query = createQuery({\n   76              posts: {\n   77                  group: {\n   ..\n   81          });\n   82  \n   83:         let handle = query.subscribe();\n   84          Tracker.autorun((c) => {\n   85              if (handle.ready()) {\n   86                  c.stop();\n   87:                 let data = query.fetch();\n   88  \n   89                  handle.stop();\n   ..\n  100  \n  101      it('Should fetch direct Many links with $metadata via Subscription', function (done) {\n  102:         let query = createQuery({\n  103              authors: {\n  104                  groups: {\n  ...\n  109          });\n  110  \n  111:         let handle = query.subscribe();\n  112          Tracker.autorun((c) => {\n  113              if (handle.ready()) {\n  114                  c.stop();\n  115:                 let data = query.fetch();\n  116  \n  117                  handle.stop();\n  ...\n  131  \n  132      it('Should fetch Inversed One Meta links with $metadata via Subscription', function (done) {\n  133:         let query = createQuery({\n  134              groups: {\n  135                  posts: {\n  ...\n  139          });\n  140  \n  141:         let handle = query.subscribe();\n  142  \n  143          Tracker.autorun((c) => {\n  ...\n  145                  c.stop();\n  146  \n  147:                 let data = query.fetch();\n  148                  handle.stop();\n  149  \n  ...\n  162  \n  163      it('Should fetch Inversed Many Meta links with $metadata via Subscription', function (done) {\n  164:         let query = createQuery({\n  165              groups: {\n  166                  authors: {\n  ...\n  171          });\n  172  \n  173:         let handle = query.subscribe();\n  174  \n  175          Tracker.autorun((c) => {\n  ...\n  177                  c.stop();\n  178  \n  179:                 let data = query.fetch();\n  180  \n  181                  _.each(data, group => {\n  ...\n  192  \n  193      it('Should work with promises', async function () {\n  194:         let query = createQuery({\n  195              groups: {\n  196                  posts: {\n  ...\n  200          });\n  201  \n  202:         let result = await query.fetchSync();\n  203  \n  204          assert.isArray(result);\n  ...\n  209          });\n  210  \n  211:         result = await query.fetchOneSync();\n  212  \n  213          assert.isObject(result);\n  ...\n  215          assert.isArray(result.posts);\n  216  \n  217:         result = await query.getCountSync();\n  218  \n  219          assert.isNumber(result);\n  ...\n  221  \n  222      it('Should work with fetchOne', async function (done) {\n  223:         let query = createQuery({\n  224              groups: {\n  225                  posts: {\n  ...\n  229          });\n  230  \n  231:         query.fetchOne((err, group) => {\n  232              assert.isNotArray(group);\n  233              assert.isObject(group);\n  ...\n  239  \n  240      it('Should work sorting with options that contain a dot', function () {\n  241:         let query = createQuery({\n  242              posts: {\n  243                  author: {\n  ...\n  252          });\n  253  \n  254:         query.fetch((err, data) => {\n  255              assert.isArray(data);\n  256          })\n  ...\n  258  \n  259      it('Should properly clone and work with setParams', function () {\n  260:         let query = createQuery({\n  261              posts: {\n  262                  $options: {limit: 5}\n  ...\n  264          });\n  265  \n  266:         let clone = query.clone({});\n  267  \n  268          assert.isFunction(clone.fetch);\n\n/home/simon/Desktop/testing/packages/grapher/lib/query/testing/metaFilters.server.test.js:\n    1: import { createQuery } from 'meteor/cultofcoders:grapher';\n    2  \n    3  describe('Hypernova - $meta filters', function () {\n    4      it('Should work with $meta filters - One Meta Direct', function () {\n    5:         const data = createQuery({\n    6              posts: {\n    7                  group: {\n    .\n   15          const random = post.group.$metadata.random;\n   16  \n   17:         let posts = createQuery({\n   18              posts: {\n   19                  $filters: {_id: post._id},\n   ..\n   29          assert.isObject(posts[0].group);\n   30  \n   31:         posts = createQuery({\n   32              posts: {\n   33                  $filters: {_id: post._id},\n   ..\n   45  \n   46      it('Should work with $meta filters - One Meta Virtual', function () {\n   47:         const data = createQuery({\n   48              groups: {\n   49                  posts: {\n   ..\n   58          assert.isDefined(random);\n   59  \n   60:         let groups = createQuery({\n   61              groups: {\n   62                  $filters: {_id: group._id},\n   ..\n   76          assert.equal(groups[0].posts[0].$metadata.random, random);\n   77  \n   78:         groups = createQuery({\n   79              groups: {\n   80                  $filters: {_id: group._id},\n   ..\n   94  \n   95      it('Should work with $meta filters - Many Meta Direct', function () {\n   96:         let data = createQuery({\n   97              authors: {\n   98                  name: 1,\n   ..\n  117          });\n  118  \n  119:         data = createQuery({\n  120              authors: {\n  121                  name: 1,\n  ...\n  142  \n  143      it('Should work with $meta filters - Many Meta Virtual', function () {\n  144:         let data = createQuery({\n  145              groups: {\n  146                  name: 1,\n  ...\n  165          });\n  166  \n  167:         data = createQuery({\n  168              groups: {\n  169                  name: 1,\n\n/home/simon/Desktop/testing/packages/grapher/lib/query/testing/reducers.client.test.js:\n    1: import { createQuery } from 'meteor/cultofcoders:grapher';\n    2  import waitForHandleToBeReady from './lib/waitForHandleToBeReady';\n    3  \n    4  describe('Client-side reducers', function () {\n    5      it('Should work with field only reducers', async function () {\n    6:         const query = createQuery({\n    7              authors: {\n    8                  fullName: 1\n    .\n   10          });\n   11  \n   12:         let handle = query.subscribe();\n   13          await waitForHandleToBeReady(handle);\n   14:         const data = query.fetch();\n   15  \n   16          assert.isTrue(data.length > 0);\n   ..\n   26  \n   27      it('Should work with nested fields reducers', async function () {\n   28:         const query = createQuery({\n   29              authors: {\n   30                  fullNameNested: 1\n   ..\n   32          });\n   33  \n   34:         let handle = query.subscribe();\n   35          await waitForHandleToBeReady(handle);\n   36:         const data = query.fetch();\n   37  \n   38          assert.isTrue(data.length > 0);\n   ..\n   49  \n   50      it('Should work with nested fields reducers', async function () {\n   51:         const query = createQuery({\n   52              authors: {\n   53                  profile: {\n   ..\n   58          });\n   59  \n   60:         let handle = query.subscribe();\n   61          await waitForHandleToBeReady(handle);\n   62:         const data = query.fetch();\n   63  \n   64          assert.isTrue(data.length > 0);\n   ..\n   77  \n   78      it('Should work with links reducers', async function () {\n   79:         const query = createQuery({\n   80              authors: {\n   81                  groupNames: 1\n   ..\n   83          });\n   84  \n   85:         let handle = query.subscribe();\n   86          await waitForHandleToBeReady(handle);\n   87:         const data = query.fetch();\n   88  \n   89          assert.isTrue(data.length > 0);\n   ..\n   98  \n   99      it('Should work with links and nested reducers', async function () {\n  100:         const query = createQuery({\n  101              authors: {\n  102                  referenceReducer: 1\n  ...\n  104          });\n  105  \n  106:         let handle = query.subscribe();\n  107          await waitForHandleToBeReady(handle);\n  108:         const data = query.fetch();\n  109  \n  110          assert.isTrue(data.length > 0);\n  ...\n  120  \n  121      it('Should not clean nested reducers if not specified', async function () {\n  122:         const query = createQuery({\n  123              authors: {\n  124                  referenceReducer: 1,\n  ...\n  127          });\n  128  \n  129:         let handle = query.subscribe();\n  130          await waitForHandleToBeReady(handle);\n  131:         const data = query.fetch();\n  132  \n  133          assert.isTrue(data.length > 0);\n  ...\n  142  \n  143      it('Should keep previously used items - Part 1', async function () {\n  144:         const query = createQuery({\n  145              authors: {\n  146                  fullName: 1,\n  ...\n  153          });\n  154  \n  155:         let handle = query.subscribe();\n  156          await waitForHandleToBeReady(handle);\n  157:         const data = query.fetch();\n  158  \n  159          assert.isTrue(data.length > 0);\n  ...\n  171  \n  172      it('Should keep previously used items - Part 2', async function () {\n  173:         const query = createQuery({\n  174              authors: {\n  175                  groupNames: 1,\n  ...\n  180          });\n  181  \n  182:         let handle = query.subscribe();\n  183          await waitForHandleToBeReady(handle);\n  184:         const data = query.fetch();\n  185  \n  186          assert.isTrue(data.length > 0);\n\n/home/simon/Desktop/testing/packages/grapher/lib/query/testing/reducers.server.test.js:\n    1: import { createQuery } from 'meteor/cultofcoders:grapher';\n    2  \n    3  describe('Reducers', function () {\n    4      it('Should work with field only reducers', function () {\n    5:         const data = createQuery({\n    6              authors: {\n    7                  fullName: 1\n    .\n   19  \n   20      it('Should work with nested fields reducers', function () {\n   21:         const data = createQuery({\n   22              authors: {\n   23                  fullNameNested: 1\n   ..\n   36  \n   37      it('Should work with nested fields reducers', function () {\n   38:         const data = createQuery({\n   39              authors: {\n   40                  profile: {\n   ..\n   58  \n   59      it('Should work with links reducers', function () {\n   60:         const data = createQuery({\n   61              authors: {\n   62                  groupNames: 1\n   ..\n   73  \n   74      it('Should work with links and nested reducers', function () {\n   75:         const data = createQuery({\n   76              authors: {\n   77                  referenceReducer: 1\n   ..\n   89  \n   90      it('Should not clean nested reducers if not specified', function () {\n   91:         const data = createQuery({\n   92              authors: {\n   93                  referenceReducer: 1,\n   ..\n  105  \n  106      it('Should keep previously used items - Part 1', function () {\n  107:         const data = createQuery({\n  108              authors: {\n  109                  fullName: 1,\n  ...\n  128  \n  129      it('Should keep previously used items - Part 2', function () {\n  130:         const data = createQuery({\n  131              authors: {\n  132                  groupNames: 1,\n\n/home/simon/Desktop/testing/packages/grapher/lib/query/testing/security.client.test.js:\n    1: import { createQuery } from 'meteor/cultofcoders:grapher';\n    2  import waitForHandleToBeReady from './lib/waitForHandleToBeReady';\n    3  \n    4: describe('Query Security Client Tests', function () {\n    5:     it('Should not retrieve subitems with reactive and non-reactive query', async function () {\n    6:         const query = createQuery({\n    7              security_items: {\n    8                  text: 1,\n    .\n   13          });\n   14  \n   15:         const handle = query.subscribe();\n   16  \n   17          await waitForHandleToBeReady(handle);\n   18  \n   19:         const data = query.fetch();\n   20  \n   21          assert.lengthOf(data, 1);\n\n/home/simon/Desktop/testing/packages/grapher/lib/query/testing/server.test.js:\n    1: import { createQuery } from 'meteor/cultofcoders:grapher';\n    2  import Comments from './bootstrap/comments/collection.js';\n    3  import './units/deepClone';\n    .\n    7  describe('Hypernova', function () {\n    8      it('Should fetch One links correctly', function () {\n    9:         const data = createQuery({\n   10              comments: {\n   11                  text: 1,\n   ..\n   28  \n   29      it('Should fetch One links with limit and options', function () {\n   30:         const data = createQuery({\n   31              comments: {\n   32                  $options: {limit: 5},\n   ..\n   39  \n   40      it('Should fetch One-Inversed links with limit and options', function () {\n   41:         const query = createQuery({\n   42              authors: {\n   43                  $options: {limit: 5},\n   ..\n   50          }, {}, {debug: true});\n   51  \n   52:         const data = query.fetch();\n   53  \n   54          assert.lengthOf(data, 5);\n   ..\n   62  \n   63      it('Should fetch Many links correctly', function () {\n   64:         const data = createQuery({\n   65              posts: {\n   66                  $options: {limit: 5},\n   ..\n   81  \n   82      it('Should fetch Many - inversed links correctly', function () {\n   83:         const data = createQuery({\n   84              tags: {\n   85                  name: 1,\n   ..\n  102  \n  103      it('Should fetch One-Meta links correctly', function () {\n  104:         const data = createQuery({\n  105              posts: {\n  106                  $options: {limit: 5},\n  ...\n  123  \n  124      it('Should fetch One-Meta inversed links correctly', function () {\n  125:         const data = createQuery({\n  126              groups: {\n  127                  name: 1,\n  ...\n  145  \n  146      it('Should fetch Many-Meta links correctly', function () {\n  147:         const data = createQuery({\n  148              authors: {\n  149                  name: 1,\n  ...\n  168  \n  169      it('Should fetch Many-Meta inversed links correctly', function () {\n  170:         const data = createQuery({\n  171              groups: {\n  172                  name: 1,\n  ...\n  191  \n  192      it('Should fetch direct One & Many Meta links with $metadata', function () {\n  193:         let data = createQuery({\n  194              posts: {\n  195                  group: {\n  ...\n  204          });\n  205  \n  206:         data = createQuery({\n  207              authors: {\n  208                  groups: {\n  ...\n  223  \n  224      it('Should fetch Inversed One & Many Meta links with $metadata', function () {\n  225:         let data = createQuery({\n  226              groups: {\n  227                  posts: {\n  ...\n  239          });\n  240  \n  241:         data = createQuery({\n  242              groups: {\n  243                  authors: {\n  ...\n  256  \n  257      it('Should fetch Resolver links properly', function () {\n  258:         const data = createQuery({\n  259              posts: {\n  260                  $options: {limit: 5},\n  ...\n  270  \n  271      it('Should fetch in depth properly at any given level.', function () {\n  272:         const data = createQuery({\n  273              authors: {\n  274                  $options: {limit: 5},\n  ...\n  313  \n  314      it('Should work with filters of $and and $or on subcollections', function () {\n  315:         let data = createQuery({\n  316              posts: {\n  317                  comments: {\n  ...\n  338  \n  339      it('Should work sorting with options that contain a dot', function () {\n  340:         let data = createQuery({\n  341              posts: {\n  342                  author: {\n  ...\n  355  \n  356      it('Should properly clone and work with setParams', function () {\n  357:         let query = createQuery({\n  358              posts: {\n  359                  $options: {limit: 5}\n  ...\n  361          });\n  362  \n  363:         let clone = query.clone({});\n  364  \n  365          assert.isFunction(clone.fetch);\n  ...\n  370  \n  371      it('Should work with $postFilters', function () {\n  372:         let query = createQuery({\n  373              posts: {\n  374                  $postFilters: {\n  ...\n  382          });\n  383  \n  384:         const data = query.fetch();\n  385          assert.lengthOf(data, 0);\n  386  \n  387:         query = createQuery({\n  388              posts: {\n  389                  $postFilters: {\n  ...\n  397          });\n  398  \n  399:         assert.isTrue(query.fetch().length > 0);\n  400      })\n  401  \n  402      it('Should work with $postOptions', function () {\n  403:         let query = createQuery({\n  404              posts: {\n  405                  $postOptions: {\n  ...\n  415          });\n  416  \n  417:         const data = query.fetch();\n  418          assert.lengthOf(data, 5);\n  419      })\n\n/home/simon/Desktop/testing/packages/grapher-vue/README.md:\n    3  This package makes using [Grapher](http://grapher.cultofcoders.com/) with [Vue](https://vuejs.org/) in [Meteor](https://www.meteor.com/) easy. It automatically subscribes to your queries when the component is loaded, and unsubscribes to them when the component is destroyed.\n    4  \n    5: Query paramaters are reactive, using Vue's reactivity. If you for example use `this.limit` in your query, and `this.limit` changes, it will update the query and subscription. If you want to turn this off, add `reactive:false`.\n    6  \n    7  You can also fetch data nonreactively, by adding `subscribe:false`. It uses the same result structure as the subscribe version. It will first return an object `{ready:false,data:[]}`. Once it finishes, the object will be updated with the results.\n    .\n   43          return {\n   44            collection:Meteor.users,\n   45:           query:{ //These are the paramaters passed to collection.createQuery()\n   46              username:1,\n   47              profile:1,\n   ..\n   64    count: Number, //Number of results\n   65    time: Number, //How many milliseconds it took until it was ready\n   66:   data: Array //The result of the query\n   67  }\n   68  ```\n\n/home/simon/Desktop/testing/packages/grapher-vue/grapher-vue.js:\n   17  \t\t\t\t\t\tlet readyOnce = false\n   18  \t\t\t\t\t\tlet nonreactive\n   19: \t\t\t\t\t\t//Run this function once, and every time the query parameters change\n   20  \t\t\t\t\t\tlet unwatch = this.$watch(fn, params => {\n   21  \t\t\t\t\t\t\tif(typeof params !== 'object'){\n   ..\n   24  \t\t\t\t\t\t\tnonreactive = params.reactive === false\n   25  \t\t\t\t\t\t\tlet start = new Date(), time\n   26: \t\t\t\t\t\t\tif(!this._grapher[name]){ //Create the query\n   27: \t\t\t\t\t\t\t\tthis._grapher[name] = params.collection.createQuery(params.query)\n   28  \t\t\t\t\t\t\t}\n   29: \t\t\t\t\t\t\tlet query = this._grapher[name]\n   30: \t\t\t\t\t\t\tquery.body = params.query\n   31  \t\t\t\t\t\t\tif(params.single){\n   32: \t\t\t\t\t\t\t\tif(!query.body.$options){\n   33: \t\t\t\t\t\t\t\t\tquery.body.$options = {}\n   34  \t\t\t\t\t\t\t\t}\n   35: \t\t\t\t\t\t\t\tquery.body.$options.limit = 1\n   36  \t\t\t\t\t\t\t}\n   37  \t\t\t\t\t\t\tif(params.subscribe === false){ //\"Method style\" fetch\n   38: \t\t\t\t\t\t\t\tif(query.subscriptionHandle){ //Handle switching from subscription-based\n   39  \t\t\t\t\t\t\t\t\tthis.$stopHandle(computation)\n   40: \t\t\t\t\t\t\t\t\tquery.unsubscribe()\n   41  \t\t\t\t\t\t\t\t}\n   42  \t\t\t\t\t\t\t\tthis[name].ready = false \n   43: \t\t\t\t\t\t\t\tquery.fetch((err,result) => {\n   44  \t\t\t\t\t\t\t\t\tif(err){\n   45  \t\t\t\t\t\t\t\t\t\tconsole.err(err)\n   ..\n   58  \t\t\t\t\t\t\t\t})\n   59  \t\t\t\t\t\t\t} else { //Subscribe and fetch\n   60: \t\t\t\t\t\t\t\tlet oldSub = query.subscriptionHandle\n   61: \t\t\t\t\t\t\t\tquery.subscribe()\n   62  \t\t\t\t\t\t\t\tif(oldSub){\n   63  \t\t\t\t\t\t\t\t\toldSub.stop()\n   ..\n   69  \t\t\t\t\t\t\t\t}\n   70  \t\t\t\t\t\t\t\tcomputation = this.$autorun(()=>{\n   71: \t\t\t\t\t\t\t\t\tif(!query.subscriptionHandle){\n   72  \t\t\t\t\t\t\t\t\t\treturn\n   73  \t\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\n   74: \t\t\t\t\t\t\t\t\tlet ready = query.subscriptionHandle.ready()\n   75  \t\t\t\t\t\t\t\t\tif(ready && !readyOnce){\n   76  \t\t\t\t\t\t\t\t\t\treadyOnce = true\n   ..\n   79  \t\t\t\t\t\t\t\t\t\ttime = new Date() - start\n   80  \t\t\t\t\t\t\t\t\t}\n   81: \t\t\t\t\t\t\t\t\tlet result = query.fetch()\n   82  \t\t\t\t\t\t\t\t\tif(params.single){\n   83  \t\t\t\t\t\t\t\t\t\tresult = result[0]\n   ..\n  100  \t\t\t},\n  101  \t\t\tdestroyed(){\n  102: \t\t\t\t_.each(this._grapher, query => query.unsubscribe())\n  103  \t\t\t\tthis._grapher = null\n  104  \t\t\t}\n\n402 matches across 40 files\n\n\nSearching 142 files for \"query\"\n\n/home/simon/Desktop/testing/client/components/grapher.vue:\n   21  \t\t</div>\n   22  \t\t<item v-else :item=\"stuff.result\"/>\n   23: \t\tQuery:\n   24: \t\t<pre>{{query}}</pre>\n   25  \t\tResult:\n   26  \t\t<pre>{{stuff}}</pre>\n   ..\n   39  \t\t\t\tselected:false,\n   40  \t\t\t\tsearch:'',\n   41: \t\t\t\tquery:{}\n   42  \t\t\t}\n   43  \t\t},\n   ..\n   52  \t\t\t\t}\n   53  \t\t\t\t\n   54: \t\t\t\tlet query = {\n   55  \t\t\t\t\tsubscribe:this.subscribe,\n   56  \t\t\t\t\tsingle:this.single,\n   57  \t\t\t\t\tcollection:Test,\n   58: \t\t\t\t\tquery:{\n   59  \t\t\t\t\t\t_id:1,\n   60  \t\t\t\t\t\tcolor:1,\n   ..\n   71  \n   72  \t\t\t\t//Create the JSON display\n   73: \t\t\t\tlet display = _.clone(query)\n   74  \t\t\t\tdisplay.collection = display.collection._name\n   75: \t\t\t\tthis.query = Object.freeze(display)\n   76  \n   77: \t\t\t\treturn query\n   78  \t\t\t}\n   79  \t\t}\n\n/home/simon/Desktop/testing/client/components/infinite.vue:\n   22  \t\t\t\treturn {\n   23  \t\t\t\t\tcollection:Test,\n   24: \t\t\t\t\tquery:{\n   25  \t\t\t\t\t\t_id:1,\n   26  \t\t\t\t\t\tcolor:1,\n\n/home/simon/Desktop/testing/packages/grapher/CHANGELOG.md:\n    2  - Support for promises via .fetchSync and .fetchOneSync for client-side queries\n    3  - Support for autoremove from inverse side as well\n    4: - Fixed .fetchOne from client-side Query\n    5  \n    6  ## 1.2.4\n    .\n   45  \n   46  ## 1.1.9\n   47: - Added .clone() to Query\n   48: - Added namedQuery concept. \n   49  - Direct meta-children are automatically appended with $metadata\n   50: - Added .fetchOne() to Query\n   51  - Modified Documentor so it returns queries also.\n   52  - Fixed bug with deep $filter() function\n   ..\n   63  \n   64  ## 1.1.4\n   65: - Decoupled query fetcher better, removing automatically \"skip\" option when fetching as client\n   66  - Ability to allow skip when you want custom behavior\n   67  \n\n/home/simon/Desktop/testing/packages/grapher/README.md:\n   60  #### Integration with React (cultofcoders:grapher-react)\n   61  \n   62: Provides you with an easy to use \"createQueryContainer\" function.\n   63  \n   64  - [Atmosphere](https://atmospherejs.com/cultofcoders/grapher-react)\n\n/home/simon/Desktop/testing/packages/grapher/main.client.js:\n    1  import './lib/links/extension.js';\n    2: import './lib/query/extension.js';\n    3: import './lib/query/reducers/extension.js';\n    4: import './lib/namedQuery/_extension.js'; //deprecated\n    5  \n    6  export {\n    7:     default as createQuery\n    8: } from './lib/query/createQuery.js';\n    9  \n   10  export {\n   11:     default as createNamedQuery\n   12: } from './lib/namedQuery/_createNamedQuery.js'; //deprecated\n   13  \n   14  export {\n   15      default as prepareForProcess\n   16: } from './lib/query/lib/prepareForProcess';\n   17  \n\n/home/simon/Desktop/testing/packages/grapher/main.server.js:\n    1  import './lib/exposure/extension.js';\n    2  import './lib/links/extension.js';\n    3: import './lib/query/extension.js';\n    4: import './lib/query/reducers/extension.js';\n    5: import './lib/namedQuery/expose/extension.js';\n    6: import './lib/namedQuery/_extension.js'; //deprecated\n    7  \n    8  export {\n    9:     default as createQuery\n   10: } from './lib/query/createQuery.js';\n   11  \n   12  export {\n   13:     default as createNamedQuery\n   14: } from './lib/namedQuery/_createNamedQuery.js'; //deprecated\n   15  \n   16  export {\n\n/home/simon/Desktop/testing/packages/grapher/package.js:\n   67      api.addFiles('lib/exposure/testing/client.js', 'client');\n   68  \n   69:     // QUERY\n   70:     api.addFiles('lib/query/testing/bootstrap/index.js');\n   71  \n   72      // When you play with tests you should comment this to make tests go faster.\n   73:     api.addFiles('lib/query/testing/bootstrap/fixtures.js', 'server');\n   74  \n   75:     api.addFiles('lib/query/testing/server.test.js', 'server');\n   76:     api.addFiles('lib/query/testing/client.test.js', 'client');\n   77  \n   78:     // NAMED QUERY\n   79:     api.addFiles('lib/namedQuery/testing/bootstrap/both.js');\n   80:     api.addFiles('lib/namedQuery/testing/bootstrap/client.js', 'client');\n   81:     api.addFiles('lib/namedQuery/testing/bootstrap/server.js', 'server');\n   82  \n   83:     api.addFiles('lib/namedQuery/testing/server.test.js', 'server');\n   84:     api.addFiles('lib/namedQuery/testing/client.test.js', 'client');\n   85  });\n   86  \n\n/home/simon/Desktop/testing/packages/grapher/lib/documentor/index.js:\n    1  import { linkStorage } from '../links/symbols.js';\n    2: import NamedQueryStore from '../namedQuery/store';\n    3: import deepClone from '../query/lib/deepClone';\n    4  \n    5  export default function extract() {\n    6      return {\n    7:         namedQueries: extractNamedQueryDocumentation(),\n    8          collections: extractCollectionDocumentation()\n    9      }\n   10  };\n   11  \n   12: function extractNamedQueryDocumentation() {\n   13:     const namedQueries = NamedQueryStore.getAll();\n   14  \n   15      let DocumentationObject = {};\n   16  \n   17:     _.each(namedQueries, namedQuery => {\n   18:         DocumentationObject[namedQuery.queryName] = {\n   19:             body: namedQuery.body,\n   20:             collection: namedQuery.collection._name,\n   21:             isExposed: namedQuery.isExposed,\n   22:             paramsSchema: (namedQuery.exposeConfig.schema)\n   23                  ?\n   24                  formatSchemaType(\n   25:                     deepClone(namedQuery.exposeConfig.schema)\n   26                  )\n   27                  : null\n\n/home/simon/Desktop/testing/packages/grapher/lib/exposure/exposure.config.schema.js:\n    1  import { SimpleSchema } from 'meteor/aldeed:simple-schema';\n    2: import createGraph from '../query/lib/createGraph.js';\n    3  \n    4  let Schema = new SimpleSchema({\n\n/home/simon/Desktop/testing/packages/grapher/lib/exposure/exposure.js:\n    1: import createGraph from '../query/lib/createGraph.js';\n    2: import recursiveCompose from '../query/lib/recursiveCompose.js';\n    3: import hypernova from '../query/hypernova/hypernova.js';\n    4  import ExposureConfigSchema from './exposure.config.schema.js';\n    5  import enforceMaxDepth from './lib/enforceMaxDepth.js';\n    6  import enforceMaxLimit from './lib/enforceMaxLimit.js';\n    7  import cleanBody from './lib/cleanBody.js';\n    8: import deepClone from '../query/lib/deepClone';\n    9  import restrictFieldsFn from './lib/restrictFields.js';\n   10  import restrictLinks from './lib/restrictLinks.js';\n   ..\n  119  \n  120      /**\n  121:      * Initializing the publication for reactive query fetching\n  122       */\n  123      initPublication() {\n\n/home/simon/Desktop/testing/packages/grapher/lib/exposure/lib/cleanBody.js:\n    1: import deepClone from '../../query/lib/deepClone';\n    2  import {cleanFilters, cleanOptions} from './cleanSelectors';\n    3: import dotize from '../../query/lib/dotize';\n    4  \n    5  /**\n\n/home/simon/Desktop/testing/packages/grapher/lib/exposure/testing/client.js:\n    8  describe('Exposure Tests', function () {\n    9      it('Should fetch only allowed data and limitations should be applied', function (done) {\n   10:         const query = Demo.createQuery({\n   11              $options: {limit: 3},\n   12              restrictedField: 1\n   13          });\n   14  \n   15:         query.fetch((err, res) => {\n   16              assert.isUndefined(err);\n   17              assert.isDefined(res);\n   ..\n   23  \n   24      it('Should not allow me to fetch the graph data, because of maxDepth', function (done) {\n   25:         const query = Demo.createQuery({\n   26              $options: {limit: 3},\n   27              restrictedField: 1,\n   ..\n   33          });\n   34  \n   35:         query.fetch((err, res) => {\n   36              assert.isUndefined(res);\n   37              assert.isDefined(err);\n   ..\n   50      });\n   51  \n   52:     it('Should return the correct count via query', function (done) {\n   53:         const query = Demo.createQuery({\n   54              $options: {limit: 1}\n   55          });\n   56  \n   57:         query.getCount(function (err, res) {\n   58              assert.isUndefined(err);\n   59  \n   ..\n   64  \n   65      it('Should should not allow publish but only method', function (done) {\n   66:         const query = DemoMethod.createQuery({\n   67              _id: 1\n   68          });\n   69  \n   70:         query.fetch((err, res) => {\n   71              assert.isUndefined(err);\n   72              assert.isDefined(res);\n   73          });\n   74  \n   75:         const handler = query.subscribe({\n   76              onStop(e) {\n   77                  done();\n   ..\n   81  \n   82      it('Should should not allow method but only publish', function (done) {\n   83:         const query = DemoPublication.createQuery({\n   84              _id: 1\n   85          });\n   86  \n   87:         query.fetch((err, res) => {\n   88              assert.isDefined(err);\n   89              assert.isUndefined(res);\n   90          });\n   91  \n   92:         query.subscribe({\n   93              onReady() {\n   94                  done();\n   ..\n   99  \n  100      it('Should restrict links # restrictLinks ', function (done) {\n  101:         const query = Demo.createQuery({\n  102              _id: 1,\n  103              restrictedLink: {}\n  104          });\n  105  \n  106:         query.fetch((err, res) => {\n  107              assert.isUndefined(err);\n  108  \n  ...\n  119  \n  120      it('Should intersect the body graphs - Method', function (done) {\n  121:         const query = Intersect.createQuery({\n  122              $filters: {\n  123                  value: 'Hello'\n  ...\n  138          });\n  139  \n  140:         query.fetch((err, res) => {\n  141              assert.isUndefined(err);\n  142              assert.lengthOf(res, 1);\n  ...\n  158  \n  159      it('Should intersect the body graphs - Subscription', function (done) {\n  160:         const query = Intersect.createQuery({\n  161              $filters: {\n  162                  value: 'Hello'\n  ...\n  177          });\n  178  \n  179:         const handle = query.subscribe();\n  180  \n  181          Tracker.autorun((c) => {\n  182              if (handle.ready()) {\n  183                  c.stop();\n  184:                 const res = query.fetch();\n  185  \n  186                  assert.lengthOf(res, 1);\n\n/home/simon/Desktop/testing/packages/grapher/lib/exposure/testing/units/units.js:\n    4  import { cleanOptions, cleanFilters } from '../../lib/cleanSelectors.js';\n    5  import enforceMaxDepth, {getDepth} from '../../lib/enforceMaxDepth.js';\n    6: import CollectionNode from '../../../query/nodes/collectionNode.js';\n    7  \n    8  describe('Unit Tests', function () {\n\n/home/simon/Desktop/testing/packages/grapher/lib/namedQuery/README.md:\n    1: A secure query is a query in which the form of it is locked on the server.\n    2  Frozen queries are regarded as trusted code, the exposure from other collections will not affect them.\n    3  Only the firewall.\n    .\n    9  - It gets hard to validate/invalidate fields links.\n   10  \n   11: This is the reason why you should construct your secure query and offer control over it via params. That can be used and manipulated in $filter function.\n   12  \n   13  \n   14  ```\n   15  \n   16: const query = createNamedQuery('testList', {\n   17      tests: {\n   18          $filter({\n   ..\n   34  ```\n   35  // In the same file or in a server-side file only:\n   36: query.expose({\n   37      firewall(userId, params) {\n   38           // throw exception if not allowed \n   ..\n   49  // You must have your collections and queries imported already.\n   50  // Client side\n   51: createQuery({\n   52:     testListQuery: {\n   53          endcustomer: Meteor.userId()\n   54      }\n\n/home/simon/Desktop/testing/packages/grapher/lib/namedQuery/_createNamedQuery.js:\n    1: import createQuery from '../query/createQuery.js'\n    2  \n    3  export default (...args) => {\n    4:     console.warn('createNamedQuery is deprecated. Functionality has been moved over to createQuery');\n    5:     return createQuery(...args);\n    6  }\n    7  \n\n/home/simon/Desktop/testing/packages/grapher/lib/namedQuery/_extension.js:\n    1: import createQuery from '../query/createQuery.js';\n    2  \n    3  _.extend(Mongo.Collection.prototype, {\n    4:     createNamedQuery(...args) {\n    5:       console.warn('createNamedQuery is deprecated. Functionality has been moved over to createQuery');\n    6:       return this.createQuery(...args);\n    7      }\n    8  });\n\n/home/simon/Desktop/testing/packages/grapher/lib/namedQuery/namedQuery.base.js:\n    1: import deepClone from '../query/lib/deepClone.js';\n    2  \n    3: export default class NamedQueryBase {\n    4      constructor(name, collection, body, params = {}) {\n    5:         this.queryName = name;\n    6  \n    7          this.body = deepClone(body);\n    .\n   15  \n   16      get name() {\n   17:         return `named_query_${this.queryName}`;\n   18      }\n   19  \n   ..\n   26      clone(newParams) {\n   27          return new this.constructor(\n   28:             this.queryName,\n   29              this.collection,\n   30              deepClone(this.body),\n\n/home/simon/Desktop/testing/packages/grapher/lib/namedQuery/namedQuery.client.js:\n    1: import createGraph from '../query/lib/createGraph.js';\n    2: import recursiveFetch from '../query/lib/recursiveFetch.js';\n    3: import prepareForProcess from '../query/lib/prepareForProcess.js';\n    4  import { _ } from 'meteor/underscore';\n    5: import callWithPromise from '../query/lib/callWithPromise';\n    6: import Base from './namedQuery.base';\n    7  \n    8  export default class extends Base {\n    .\n   40      async fetchSync() {\n   41          if (this.subscriptionHandle) {\n   42:             throw new Meteor.Error('This query is reactive, meaning you cannot use promises to fetch the data.');\n   43          }\n   44  \n\n/home/simon/Desktop/testing/packages/grapher/lib/namedQuery/namedQuery.js:\n    1: import NamedQueryClient from './namedQuery.client';\n    2: import NamedQueryServer from './namedQuery.server';\n    3  \n    4: let NamedQuery;\n    5  \n    6  if (Meteor.isServer) {\n    7:     NamedQuery = NamedQueryServer;\n    8  } else {\n    9:     NamedQuery = NamedQueryClient;\n   10  }\n   11  \n   12: export default NamedQuery;\n\n/home/simon/Desktop/testing/packages/grapher/lib/namedQuery/namedQuery.server.js:\n    1: import prepareForProcess from '../query/lib/prepareForProcess.js';\n    2: import deepClone from '../query/lib/deepClone.js';\n    3: import Base from './namedQuery.base';\n    4  \n    5  export default class extends Base {\n    .\n    9       */\n   10      fetch() {\n   11:         const query = this.collection.createQuery(\n   12              deepClone(this.body),\n   13              deepClone(this.params)\n   14          );\n   15  \n   16:         return query.fetch();\n   17      }\n   18  \n\n/home/simon/Desktop/testing/packages/grapher/lib/namedQuery/store.js:\n    6      add(key, value) {\n    7          if (this.storage[key]) {\n    8:             throw new Meteor.Error('invalid-name', `You have previously defined another namedQuery with the same name: \"${key}\". Named Query names should be unique.`);\n    9          }\n   10  \n\n/home/simon/Desktop/testing/packages/grapher/lib/namedQuery/expose/extension.js:\n    1: import NamedQuery from '../namedQuery.js';\n    2  import ExposeSchema from './schema.js';\n    3  import mergeDeep from './lib/mergeDeep.js';\n    4: import createGraph from '../../query/lib/createGraph.js';\n    5: import recursiveCompose from '../../query/lib/recursiveCompose.js';\n    6: import prepareForProcess from '../../query/lib/prepareForProcess.js';\n    7: import deepClone from '../../query/lib/deepClone.js';\n    8  \n    9: _.extend(NamedQuery.prototype, {\n   10      expose(config = {}) {\n   11          if (!Meteor.isServer) {\n   ..\n   14  \n   15          if (this.isExposed) {\n   16:             throw new Meteor.Error('query-already-exposed', `You have already exposed: \"${this.name}\" named query`);\n   17          }\n   18  \n   ..\n   29  \n   30          if (!config.method && !config.publication) {\n   31:             throw new Meteor.Error('weird', 'If you want to expose your named query you need to specify at least one of [\"method\", \"publication\"] options to true')\n   32          }\n   33  \n   ..\n  103                      (new SimpleSchema(this.exposeConfig.schema)).validate(params);\n  104                  } catch (validationError) {\n  105:                     console.error(`Invalid parameters supplied to query ${this.queryName}`, validationError);\n  106                      throw validationError; // rethrow\n  107                  }\n\n/home/simon/Desktop/testing/packages/grapher/lib/namedQuery/testing/client.test.js:\n    1  import postListExposure from './bootstrap/queries/postListExposure.js';\n    2: import { createQuery } from 'meteor/cultofcoders:grapher';\n    3  \n    4: describe('Named Query', function () {\n    5      it('Should return proper values', function (done) {\n    6:         const query = createQuery({\n    7              postListExposure: {\n    8                  title: 'User Post - 3'\n    .\n   10          });\n   11  \n   12:         query.fetch((err, res) => {\n   13              assert.isUndefined(err);\n   14              assert.isTrue(res.length > 0);\n   ..\n   24      });\n   25  \n   26:     it('Should return proper values using query directly via import', function (done) {\n   27:         const query = postListExposure.clone({title: 'User Post - 3'});\n   28  \n   29:         query.fetch((err, res) => {\n   30              assert.isUndefined(err);\n   31              assert.isTrue(res.length > 0);\n   ..\n   42  \n   43      it('Should work with count', function (done) {\n   44:         const query = postListExposure.clone({title: 'User Post - 3'});\n   45  \n   46:         query.getCount((err, res) => {\n   47              assert.equal(6, res);\n   48              done();\n   ..\n   51  \n   52      it('Should work with reactive queries', function (done) {\n   53:         const query = createQuery({\n   54              postListExposure: {\n   55                  title: 'User Post - 3'\n   ..\n   57          });\n   58  \n   59:         const handle = query.subscribe();\n   60  \n   61          Tracker.autorun(c => {\n   62              if (handle.ready()) {\n   63                  c.stop();\n   64:                 const res = query.fetch();\n   65                  handle.stop();\n   66  \n   ..\n   79  \n   80      it('Should work with reactive queries via import', function (done) {\n   81:         const query = postListExposure.clone({\n   82              title: 'User Post - 3'\n   83          });\n   84  \n   85:         const handle = query.subscribe();\n   86  \n   87          Tracker.autorun(c => {\n   88              if (handle.ready()) {\n   89                  c.stop();\n   90:                 const res = query.fetch();\n   91                  handle.stop();\n   92  \n\n/home/simon/Desktop/testing/packages/grapher/lib/namedQuery/testing/server.test.js:\n    1  import { postList } from './bootstrap/server.js';\n    2: import { createQuery } from 'meteor/cultofcoders:grapher';\n    3  \n    4: describe('Named Query', function () {\n    5      it('Should return the proper values', function () {\n    6:         const createdQuery = createQuery({\n    7              postList: {\n    8                  title: 'User Post - 3'\n    .\n   10          });\n   11  \n   12:         const directQuery = postList.clone({\n   13              title: 'User Post - 3'\n   14          });\n   15  \n   16:         _.each([createdQuery, directQuery], (query) => {\n   17:             const data = query.fetch();\n   18  \n   19              assert.isTrue(data.length > 1);\n   ..\n   28  \n   29      it('Exposure embodyment should work properly', function () {\n   30:         const query = createQuery({\n   31              postListExposure: {\n   32                  title: 'User Post - 3'\n   ..\n   34          });\n   35  \n   36:         const data = query.fetch();\n   37  \n   38          assert.isTrue(data.length > 1);\n\n/home/simon/Desktop/testing/packages/grapher/lib/namedQuery/testing/bootstrap/server.js:\n    1: import { createNamedQuery } from 'meteor/cultofcoders:grapher';\n    2  import postListExposure from './queries/postListExposure.js';\n    3  \n    4: const postList = createNamedQuery('postList', {\n    5      posts: {\n    6          $filter({filters, params}) {\n\n/home/simon/Desktop/testing/packages/grapher/lib/namedQuery/testing/bootstrap/queries/postListExposure.js:\n    1: import { createNamedQuery } from 'meteor/cultofcoders:grapher';\n    2  \n    3: export default createNamedQuery('postListExposure', {\n    4      posts: {\n    5          title: 1,\n\n/home/simon/Desktop/testing/packages/grapher/lib/query/createQuery.js:\n    1: import Query from './query.js';\n    2: import NamedQuery from '../namedQuery/namedQuery.js';\n    3: import NamedQueryStore from '../namedQuery/store.js';\n    4  \n    5  export default (...args) => {\n    .\n    7      let body;\n    8      let rest;\n    9:     if (typeof args[0] == 'string') { //NamedQuery\n   10          name = args[0];\n   11          body = args[1];\n   12          rest = args.slice(2)\n   13:     } else { //Query\n   14          body = args[0];\n   15          rest = args.slice(1)\n   ..\n   17  \n   18      if (_.keys(body).length > 1) {\n   19:         throw new Meteor.Error('invalid-query', 'When using createQuery you should only have one main root point that represents the collection name.')\n   20      }\n   21  \n   ..\n   24      const collection = Mongo.Collection.get(entryPointName);\n   25      if (!collection) {\n   26:         if (name) { //is a NamedQuery\n   27              throw new Meteor.Error('invalid-name', `We could not find any collection with the name \"${entryPointName}\". Make sure it is imported prior to using this`)\n   28          }\n   29:         const namedQuery = NamedQueryStore.get(entryPointName);\n   30  \n   31:         if (!namedQuery) {\n   32:             throw new Meteor.Error('entry-point-not-found', `We could not find any collection or named query with the name \"${entryPointName}\". Make sure you have them loaded in the environment you are executing *createQuery*`)\n   33          } else {\n   34:             return namedQuery.clone(body[entryPointName], ...rest);\n   35          }\n   36      }\n   37  \n   38      if (name) {\n   39:         const query = new NamedQuery(name, collection, body[entryPointName], ...rest);\n   40:         NamedQueryStore.add(name, query);\n   41          \n   42:         return query;\n   43      } else {\n   44:         return new Query(collection, body[entryPointName], ...rest);\n   45      }\n   46  }\n\n/home/simon/Desktop/testing/packages/grapher/lib/query/extension.js:\n    1: import Query from './query.js';\n    2  \n    3  _.extend(Mongo.Collection.prototype, {\n    4:     createQuery(...args) {\n    5:       if (args[0] == 'string') { //NamedQuery\n    6          const name = args[0];\n    7          const body = args[1];\n    8          const params = args[2];\n    9  \n   10:         const query = new NamedQuery(name, this, body, params);\n   11:         NamedQueryStore.add(name, query);\n   12          \n   13:         return query;\n   14:       } else { //Query\n   15          const body = args[0];\n   16          const params = args[1];\n   17  \n   18:         return new Query(this, body, params);\n   19        }\n   20      }\n\n/home/simon/Desktop/testing/packages/grapher/lib/query/query.base.js:\n    1  import deepClone from './lib/deepClone.js';\n    2  \n    3: export default class QueryBase {\n    4      constructor(collection, body, params = {}) {\n    5          this.collection = collection;\n    .\n   31       *\n   32       * @param data\n   33:      * @returns {Query}\n   34       */\n   35      setParams(data) {\n\n/home/simon/Desktop/testing/packages/grapher/lib/query/query.client.js:\n    4  import prepareForProcess from './lib/prepareForProcess.js';\n    5  import callWithPromise from './lib/callWithPromise';\n    6: import Base from './query.base';\n    7  \n    8: export default class Query extends Base {\n    9      /**\n   10       * Subscribe\n   ..\n   40      async fetchSync() {\n   41          if (this.subscriptionHandle) {\n   42:             throw new Meteor.Error('This query is reactive, meaning you cannot use promises to fetch the data.');\n   43          }\n   44  \n\n/home/simon/Desktop/testing/packages/grapher/lib/query/query.js:\n    1: import QueryClient from './query.client';\n    2: import QueryServer from './query.server';\n    3  \n    4: let Query;\n    5  \n    6  if (Meteor.isServer) {\n    7:     Query = QueryServer;\n    8  } else {\n    9:     Query = QueryClient;\n   10  }\n   11  \n   12: export default Query;\n\n/home/simon/Desktop/testing/packages/grapher/lib/query/query.server.js:\n    2  import prepareForProcess from './lib/prepareForProcess.js';\n    3  import hypernova from './hypernova/hypernova.js';\n    4: import Base from './query.base';\n    5  \n    6: export default class Query extends Base {\n    7      /**\n    8       * Retrieves the data.\n\n/home/simon/Desktop/testing/packages/grapher/lib/query/testing/client.test.js:\n    1: import { createQuery } from 'meteor/cultofcoders:grapher';\n    2  import './units/deepClone';\n    3  import './reducers.client.test';\n    .\n    5  import waitForHandleToBeReady from './lib/waitForHandleToBeReady';\n    6  \n    7: describe('Query Client Tests', function () {\n    8      it('Should work with queries via method call', function (done) {\n    9:         const query = createQuery({\n   10              posts: {\n   11                  $options: {limit: 5},\n   ..\n   18          });\n   19  \n   20:         query.fetch((err, res) => {\n   21              assert.isUndefined(err);\n   22  \n   ..\n   36  \n   37      it('Should work with queries reactively', function (done) {\n   38:         const query = createQuery({\n   39              posts: {\n   40                  $options: {limit: 5},\n   ..\n   47          });\n   48  \n   49:         const handle = query.subscribe();\n   50  \n   51          Tracker.autorun(c => {\n   ..\n   53                  c.stop();\n   54  \n   55:                 const res = query.fetch();\n   56  \n   57                  assert.isArray(res);\n   ..\n   73  \n   74      it('Should fetch direct One links with $metadata via Subscription', function (done) {\n   75:         let query = createQuery({\n   76              posts: {\n   77                  group: {\n   ..\n   81          });\n   82  \n   83:         let handle = query.subscribe();\n   84          Tracker.autorun((c) => {\n   85              if (handle.ready()) {\n   86                  c.stop();\n   87:                 let data = query.fetch();\n   88  \n   89                  handle.stop();\n   ..\n  100  \n  101      it('Should fetch direct Many links with $metadata via Subscription', function (done) {\n  102:         let query = createQuery({\n  103              authors: {\n  104                  groups: {\n  ...\n  109          });\n  110  \n  111:         let handle = query.subscribe();\n  112          Tracker.autorun((c) => {\n  113              if (handle.ready()) {\n  114                  c.stop();\n  115:                 let data = query.fetch();\n  116  \n  117                  handle.stop();\n  ...\n  131  \n  132      it('Should fetch Inversed One Meta links with $metadata via Subscription', function (done) {\n  133:         let query = createQuery({\n  134              groups: {\n  135                  posts: {\n  ...\n  139          });\n  140  \n  141:         let handle = query.subscribe();\n  142  \n  143          Tracker.autorun((c) => {\n  ...\n  145                  c.stop();\n  146  \n  147:                 let data = query.fetch();\n  148                  handle.stop();\n  149  \n  ...\n  162  \n  163      it('Should fetch Inversed Many Meta links with $metadata via Subscription', function (done) {\n  164:         let query = createQuery({\n  165              groups: {\n  166                  authors: {\n  ...\n  171          });\n  172  \n  173:         let handle = query.subscribe();\n  174  \n  175          Tracker.autorun((c) => {\n  ...\n  177                  c.stop();\n  178  \n  179:                 let data = query.fetch();\n  180  \n  181                  _.each(data, group => {\n  ...\n  192  \n  193      it('Should work with promises', async function () {\n  194:         let query = createQuery({\n  195              groups: {\n  196                  posts: {\n  ...\n  200          });\n  201  \n  202:         let result = await query.fetchSync();\n  203  \n  204          assert.isArray(result);\n  ...\n  209          });\n  210  \n  211:         result = await query.fetchOneSync();\n  212  \n  213          assert.isObject(result);\n  ...\n  215          assert.isArray(result.posts);\n  216  \n  217:         result = await query.getCountSync();\n  218  \n  219          assert.isNumber(result);\n  ...\n  221  \n  222      it('Should work with fetchOne', async function (done) {\n  223:         let query = createQuery({\n  224              groups: {\n  225                  posts: {\n  ...\n  229          });\n  230  \n  231:         query.fetchOne((err, group) => {\n  232              assert.isNotArray(group);\n  233              assert.isObject(group);\n  ...\n  239  \n  240      it('Should work sorting with options that contain a dot', function () {\n  241:         let query = createQuery({\n  242              posts: {\n  243                  author: {\n  ...\n  252          });\n  253  \n  254:         query.fetch((err, data) => {\n  255              assert.isArray(data);\n  256          })\n  ...\n  258  \n  259      it('Should properly clone and work with setParams', function () {\n  260:         let query = createQuery({\n  261              posts: {\n  262                  $options: {limit: 5}\n  ...\n  264          });\n  265  \n  266:         let clone = query.clone({});\n  267  \n  268          assert.isFunction(clone.fetch);\n\n/home/simon/Desktop/testing/packages/grapher/lib/query/testing/metaFilters.server.test.js:\n    1: import { createQuery } from 'meteor/cultofcoders:grapher';\n    2  \n    3  describe('Hypernova - $meta filters', function () {\n    4      it('Should work with $meta filters - One Meta Direct', function () {\n    5:         const data = createQuery({\n    6              posts: {\n    7                  group: {\n    .\n   15          const random = post.group.$metadata.random;\n   16  \n   17:         let posts = createQuery({\n   18              posts: {\n   19                  $filters: {_id: post._id},\n   ..\n   29          assert.isObject(posts[0].group);\n   30  \n   31:         posts = createQuery({\n   32              posts: {\n   33                  $filters: {_id: post._id},\n   ..\n   45  \n   46      it('Should work with $meta filters - One Meta Virtual', function () {\n   47:         const data = createQuery({\n   48              groups: {\n   49                  posts: {\n   ..\n   58          assert.isDefined(random);\n   59  \n   60:         let groups = createQuery({\n   61              groups: {\n   62                  $filters: {_id: group._id},\n   ..\n   76          assert.equal(groups[0].posts[0].$metadata.random, random);\n   77  \n   78:         groups = createQuery({\n   79              groups: {\n   80                  $filters: {_id: group._id},\n   ..\n   94  \n   95      it('Should work with $meta filters - Many Meta Direct', function () {\n   96:         let data = createQuery({\n   97              authors: {\n   98                  name: 1,\n   ..\n  117          });\n  118  \n  119:         data = createQuery({\n  120              authors: {\n  121                  name: 1,\n  ...\n  142  \n  143      it('Should work with $meta filters - Many Meta Virtual', function () {\n  144:         let data = createQuery({\n  145              groups: {\n  146                  name: 1,\n  ...\n  165          });\n  166  \n  167:         data = createQuery({\n  168              groups: {\n  169                  name: 1,\n\n/home/simon/Desktop/testing/packages/grapher/lib/query/testing/reducers.client.test.js:\n    1: import { createQuery } from 'meteor/cultofcoders:grapher';\n    2  import waitForHandleToBeReady from './lib/waitForHandleToBeReady';\n    3  \n    4  describe('Client-side reducers', function () {\n    5      it('Should work with field only reducers', async function () {\n    6:         const query = createQuery({\n    7              authors: {\n    8                  fullName: 1\n    .\n   10          });\n   11  \n   12:         let handle = query.subscribe();\n   13          await waitForHandleToBeReady(handle);\n   14:         const data = query.fetch();\n   15  \n   16          assert.isTrue(data.length > 0);\n   ..\n   26  \n   27      it('Should work with nested fields reducers', async function () {\n   28:         const query = createQuery({\n   29              authors: {\n   30                  fullNameNested: 1\n   ..\n   32          });\n   33  \n   34:         let handle = query.subscribe();\n   35          await waitForHandleToBeReady(handle);\n   36:         const data = query.fetch();\n   37  \n   38          assert.isTrue(data.length > 0);\n   ..\n   49  \n   50      it('Should work with nested fields reducers', async function () {\n   51:         const query = createQuery({\n   52              authors: {\n   53                  profile: {\n   ..\n   58          });\n   59  \n   60:         let handle = query.subscribe();\n   61          await waitForHandleToBeReady(handle);\n   62:         const data = query.fetch();\n   63  \n   64          assert.isTrue(data.length > 0);\n   ..\n   77  \n   78      it('Should work with links reducers', async function () {\n   79:         const query = createQuery({\n   80              authors: {\n   81                  groupNames: 1\n   ..\n   83          });\n   84  \n   85:         let handle = query.subscribe();\n   86          await waitForHandleToBeReady(handle);\n   87:         const data = query.fetch();\n   88  \n   89          assert.isTrue(data.length > 0);\n   ..\n   98  \n   99      it('Should work with links and nested reducers', async function () {\n  100:         const query = createQuery({\n  101              authors: {\n  102                  referenceReducer: 1\n  ...\n  104          });\n  105  \n  106:         let handle = query.subscribe();\n  107          await waitForHandleToBeReady(handle);\n  108:         const data = query.fetch();\n  109  \n  110          assert.isTrue(data.length > 0);\n  ...\n  120  \n  121      it('Should not clean nested reducers if not specified', async function () {\n  122:         const query = createQuery({\n  123              authors: {\n  124                  referenceReducer: 1,\n  ...\n  127          });\n  128  \n  129:         let handle = query.subscribe();\n  130          await waitForHandleToBeReady(handle);\n  131:         const data = query.fetch();\n  132  \n  133          assert.isTrue(data.length > 0);\n  ...\n  142  \n  143      it('Should keep previously used items - Part 1', async function () {\n  144:         const query = createQuery({\n  145              authors: {\n  146                  fullName: 1,\n  ...\n  153          });\n  154  \n  155:         let handle = query.subscribe();\n  156          await waitForHandleToBeReady(handle);\n  157:         const data = query.fetch();\n  158  \n  159          assert.isTrue(data.length > 0);\n  ...\n  171  \n  172      it('Should keep previously used items - Part 2', async function () {\n  173:         const query = createQuery({\n  174              authors: {\n  175                  groupNames: 1,\n  ...\n  180          });\n  181  \n  182:         let handle = query.subscribe();\n  183          await waitForHandleToBeReady(handle);\n  184:         const data = query.fetch();\n  185  \n  186          assert.isTrue(data.length > 0);\n\n/home/simon/Desktop/testing/packages/grapher/lib/query/testing/reducers.server.test.js:\n    1: import { createQuery } from 'meteor/cultofcoders:grapher';\n    2  \n    3  describe('Reducers', function () {\n    4      it('Should work with field only reducers', function () {\n    5:         const data = createQuery({\n    6              authors: {\n    7                  fullName: 1\n    .\n   19  \n   20      it('Should work with nested fields reducers', function () {\n   21:         const data = createQuery({\n   22              authors: {\n   23                  fullNameNested: 1\n   ..\n   36  \n   37      it('Should work with nested fields reducers', function () {\n   38:         const data = createQuery({\n   39              authors: {\n   40                  profile: {\n   ..\n   58  \n   59      it('Should work with links reducers', function () {\n   60:         const data = createQuery({\n   61              authors: {\n   62                  groupNames: 1\n   ..\n   73  \n   74      it('Should work with links and nested reducers', function () {\n   75:         const data = createQuery({\n   76              authors: {\n   77                  referenceReducer: 1\n   ..\n   89  \n   90      it('Should not clean nested reducers if not specified', function () {\n   91:         const data = createQuery({\n   92              authors: {\n   93                  referenceReducer: 1,\n   ..\n  105  \n  106      it('Should keep previously used items - Part 1', function () {\n  107:         const data = createQuery({\n  108              authors: {\n  109                  fullName: 1,\n  ...\n  128  \n  129      it('Should keep previously used items - Part 2', function () {\n  130:         const data = createQuery({\n  131              authors: {\n  132                  groupNames: 1,\n\n/home/simon/Desktop/testing/packages/grapher/lib/query/testing/security.client.test.js:\n    1: import { createQuery } from 'meteor/cultofcoders:grapher';\n    2  import waitForHandleToBeReady from './lib/waitForHandleToBeReady';\n    3  \n    4: describe('Query Security Client Tests', function () {\n    5:     it('Should not retrieve subitems with reactive and non-reactive query', async function () {\n    6:         const query = createQuery({\n    7              security_items: {\n    8                  text: 1,\n    .\n   13          });\n   14  \n   15:         const handle = query.subscribe();\n   16  \n   17          await waitForHandleToBeReady(handle);\n   18  \n   19:         const data = query.fetch();\n   20  \n   21          assert.lengthOf(data, 1);\n\n/home/simon/Desktop/testing/packages/grapher/lib/query/testing/server.test.js:\n    1: import { createQuery } from 'meteor/cultofcoders:grapher';\n    2  import Comments from './bootstrap/comments/collection.js';\n    3  import './units/deepClone';\n    .\n    7  describe('Hypernova', function () {\n    8      it('Should fetch One links correctly', function () {\n    9:         const data = createQuery({\n   10              comments: {\n   11                  text: 1,\n   ..\n   28  \n   29      it('Should fetch One links with limit and options', function () {\n   30:         const data = createQuery({\n   31              comments: {\n   32                  $options: {limit: 5},\n   ..\n   39  \n   40      it('Should fetch One-Inversed links with limit and options', function () {\n   41:         const query = createQuery({\n   42              authors: {\n   43                  $options: {limit: 5},\n   ..\n   50          }, {}, {debug: true});\n   51  \n   52:         const data = query.fetch();\n   53  \n   54          assert.lengthOf(data, 5);\n   ..\n   62  \n   63      it('Should fetch Many links correctly', function () {\n   64:         const data = createQuery({\n   65              posts: {\n   66                  $options: {limit: 5},\n   ..\n   81  \n   82      it('Should fetch Many - inversed links correctly', function () {\n   83:         const data = createQuery({\n   84              tags: {\n   85                  name: 1,\n   ..\n  102  \n  103      it('Should fetch One-Meta links correctly', function () {\n  104:         const data = createQuery({\n  105              posts: {\n  106                  $options: {limit: 5},\n  ...\n  123  \n  124      it('Should fetch One-Meta inversed links correctly', function () {\n  125:         const data = createQuery({\n  126              groups: {\n  127                  name: 1,\n  ...\n  145  \n  146      it('Should fetch Many-Meta links correctly', function () {\n  147:         const data = createQuery({\n  148              authors: {\n  149                  name: 1,\n  ...\n  168  \n  169      it('Should fetch Many-Meta inversed links correctly', function () {\n  170:         const data = createQuery({\n  171              groups: {\n  172                  name: 1,\n  ...\n  191  \n  192      it('Should fetch direct One & Many Meta links with $metadata', function () {\n  193:         let data = createQuery({\n  194              posts: {\n  195                  group: {\n  ...\n  204          });\n  205  \n  206:         data = createQuery({\n  207              authors: {\n  208                  groups: {\n  ...\n  223  \n  224      it('Should fetch Inversed One & Many Meta links with $metadata', function () {\n  225:         let data = createQuery({\n  226              groups: {\n  227                  posts: {\n  ...\n  239          });\n  240  \n  241:         data = createQuery({\n  242              groups: {\n  243                  authors: {\n  ...\n  256  \n  257      it('Should fetch Resolver links properly', function () {\n  258:         const data = createQuery({\n  259              posts: {\n  260                  $options: {limit: 5},\n  ...\n  270  \n  271      it('Should fetch in depth properly at any given level.', function () {\n  272:         const data = createQuery({\n  273              authors: {\n  274                  $options: {limit: 5},\n  ...\n  313  \n  314      it('Should work with filters of $and and $or on subcollections', function () {\n  315:         let data = createQuery({\n  316              posts: {\n  317                  comments: {\n  ...\n  338  \n  339      it('Should work sorting with options that contain a dot', function () {\n  340:         let data = createQuery({\n  341              posts: {\n  342                  author: {\n  ...\n  355  \n  356      it('Should properly clone and work with setParams', function () {\n  357:         let query = createQuery({\n  358              posts: {\n  359                  $options: {limit: 5}\n  ...\n  361          });\n  362  \n  363:         let clone = query.clone({});\n  364  \n  365          assert.isFunction(clone.fetch);\n  ...\n  370  \n  371      it('Should work with $postFilters', function () {\n  372:         let query = createQuery({\n  373              posts: {\n  374                  $postFilters: {\n  ...\n  382          });\n  383  \n  384:         const data = query.fetch();\n  385          assert.lengthOf(data, 0);\n  386  \n  387:         query = createQuery({\n  388              posts: {\n  389                  $postFilters: {\n  ...\n  397          });\n  398  \n  399:         assert.isTrue(query.fetch().length > 0);\n  400      })\n  401  \n  402      it('Should work with $postOptions', function () {\n  403:         let query = createQuery({\n  404              posts: {\n  405                  $postOptions: {\n  ...\n  415          });\n  416  \n  417:         const data = query.fetch();\n  418          assert.lengthOf(data, 5);\n  419      })\n\n/home/simon/Desktop/testing/packages/grapher-vue/README.md:\n    3  This package makes using [Grapher](http://grapher.cultofcoders.com/) with [Vue](https://vuejs.org/) in [Meteor](https://www.meteor.com/) easy. It automatically subscribes to your queries when the component is loaded, and unsubscribes to them when the component is destroyed.\n    4  \n    5: Query paramaters are reactive, using Vue's reactivity. If you for example use `this.limit` in your query, and `this.limit` changes, it will update the query and subscription. If you want to turn this off, add `reactive:false`.\n    6  \n    7  You can also fetch data nonreactively, by adding `subscribe:false`. It uses the same result structure as the subscribe version. It will first return an object `{ready:false,data:[]}`. Once it finishes, the object will be updated with the results.\n    .\n   43          return {\n   44            collection:Meteor.users,\n   45:           query:{ //These are the paramaters passed to collection.createQuery()\n   46              username:1,\n   47              profile:1,\n   ..\n   64    count: Number, //Number of results\n   65    time: Number, //How many milliseconds it took until it was ready\n   66:   data: Array //The result of the query\n   67  }\n   68  ```\n\n/home/simon/Desktop/testing/packages/grapher-vue/grapher-vue.js:\n   17  \t\t\t\t\t\tlet readyOnce = false\n   18  \t\t\t\t\t\tlet nonreactive\n   19: \t\t\t\t\t\t//Run this function once, and every time the query parameters change\n   20  \t\t\t\t\t\tlet unwatch = this.$watch(fn, params => {\n   21  \t\t\t\t\t\t\tif(typeof params !== 'object'){\n   ..\n   24  \t\t\t\t\t\t\tnonreactive = params.reactive === false\n   25  \t\t\t\t\t\t\tlet start = new Date(), time\n   26: \t\t\t\t\t\t\tif(!this._grapher[name]){ //Create the query\n   27: \t\t\t\t\t\t\t\tthis._grapher[name] = params.collection.createQuery(params.query)\n   28  \t\t\t\t\t\t\t}\n   29: \t\t\t\t\t\t\tlet query = this._grapher[name]\n   30: \t\t\t\t\t\t\tquery.body = params.query\n   31  \t\t\t\t\t\t\tif(params.single){\n   32: \t\t\t\t\t\t\t\tif(!query.body.$options){\n   33: \t\t\t\t\t\t\t\t\tquery.body.$options = {}\n   34  \t\t\t\t\t\t\t\t}\n   35: \t\t\t\t\t\t\t\tquery.body.$options.limit = 1\n   36  \t\t\t\t\t\t\t}\n   37  \t\t\t\t\t\t\tif(params.subscribe === false){ //\"Method style\" fetch\n   38: \t\t\t\t\t\t\t\tif(query.subscriptionHandle){ //Handle switching from subscription-based\n   39  \t\t\t\t\t\t\t\t\tthis.$stopHandle(computation)\n   40: \t\t\t\t\t\t\t\t\tquery.unsubscribe()\n   41  \t\t\t\t\t\t\t\t}\n   42  \t\t\t\t\t\t\t\tthis[name].ready = false \n   43: \t\t\t\t\t\t\t\tquery.fetch((err,result) => {\n   44  \t\t\t\t\t\t\t\t\tif(err){\n   45  \t\t\t\t\t\t\t\t\t\tconsole.err(err)\n   ..\n   58  \t\t\t\t\t\t\t\t})\n   59  \t\t\t\t\t\t\t} else { //Subscribe and fetch\n   60: \t\t\t\t\t\t\t\tlet oldSub = query.subscriptionHandle\n   61: \t\t\t\t\t\t\t\tquery.subscribe()\n   62  \t\t\t\t\t\t\t\tif(oldSub){\n   63  \t\t\t\t\t\t\t\t\toldSub.stop()\n   ..\n   69  \t\t\t\t\t\t\t\t}\n   70  \t\t\t\t\t\t\t\tcomputation = this.$autorun(()=>{\n   71: \t\t\t\t\t\t\t\t\tif(!query.subscriptionHandle){\n   72  \t\t\t\t\t\t\t\t\t\treturn\n   73  \t\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\n   74: \t\t\t\t\t\t\t\t\tlet ready = query.subscriptionHandle.ready()\n   75  \t\t\t\t\t\t\t\t\tif(ready && !readyOnce){\n   76  \t\t\t\t\t\t\t\t\t\treadyOnce = true\n   ..\n   79  \t\t\t\t\t\t\t\t\t\ttime = new Date() - start\n   80  \t\t\t\t\t\t\t\t\t}\n   81: \t\t\t\t\t\t\t\t\tlet result = query.fetch()\n   82  \t\t\t\t\t\t\t\t\tif(params.single){\n   83  \t\t\t\t\t\t\t\t\t\tresult = result[0]\n   ..\n  100  \t\t\t},\n  101  \t\t\tdestroyed(){\n  102: \t\t\t\t_.each(this._grapher, query => query.unsubscribe())\n  103  \t\t\t\tthis._grapher = null\n  104  \t\t\t}\n\n402 matches across 40 files\n\n\nSearching 15 files for \"query\"\n\n/home/simon/Desktop/testing/client/components/grapher.vue:\n   21  \t\t</div>\n   22  \t\t<item v-else :item=\"stuff.result\"/>\n   23: \t\tQuery:\n   24: \t\t<pre>{{query}}</pre>\n   25  \t\tResult:\n   26  \t\t<pre>{{stuff}}</pre>\n   ..\n   39  \t\t\t\tselected:false,\n   40  \t\t\t\tsearch:'',\n   41: \t\t\t\tquery:{}\n   42  \t\t\t}\n   43  \t\t},\n   ..\n   52  \t\t\t\t}\n   53  \t\t\t\t\n   54: \t\t\t\tlet query = {\n   55  \t\t\t\t\tsubscribe:this.subscribe,\n   56  \t\t\t\t\tsingle:this.single,\n   57  \t\t\t\t\tcollection:Test,\n   58: \t\t\t\t\tquery:{\n   59  \t\t\t\t\t\t_id:1,\n   60  \t\t\t\t\t\tcolor:1,\n   ..\n   71  \n   72  \t\t\t\t//Create the JSON display\n   73: \t\t\t\tlet display = _.clone(query)\n   74  \t\t\t\tdisplay.collection = display.collection._name\n   75: \t\t\t\tthis.query = Object.freeze(display)\n   76  \n   77: \t\t\t\treturn query\n   78  \t\t\t}\n   79  \t\t}\n\n/home/simon/Desktop/testing/client/components/infinite.vue:\n   22  \t\t\t\treturn {\n   23  \t\t\t\t\tcollection:Test,\n   24: \t\t\t\t\tquery:{\n   25  \t\t\t\t\t\t_id:1,\n   26  \t\t\t\t\t\tcolor:1,\n\n9 matches across 2 files\n\n\nSearching 15 files for \"query\"\n\n/home/simon/Desktop/testing/client/components/grapher.vue:\n   21  \t\t</div>\n   22  \t\t<item v-else :item=\"stuff.result\"/>\n   23: \t\tQuery:\n   24: \t\t<pre>{{query}}</pre>\n   25  \t\tResult:\n   26  \t\t<pre>{{stuff}}</pre>\n   ..\n   39  \t\t\t\tselected:false,\n   40  \t\t\t\tsearch:'',\n   41: \t\t\t\tquery:{}\n   42  \t\t\t}\n   43  \t\t},\n   ..\n   52  \t\t\t\t}\n   53  \t\t\t\t\n   54: \t\t\t\tlet query = {\n   55  \t\t\t\t\tsubscribe:this.subscribe,\n   56  \t\t\t\t\tsingle:this.single,\n   57  \t\t\t\t\tcollection:Test,\n   58: \t\t\t\t\tquery:{\n   59  \t\t\t\t\t\t_id:1,\n   60  \t\t\t\t\t\tcolor:1,\n   ..\n   71  \n   72  \t\t\t\t//Create the JSON display\n   73: \t\t\t\tlet display = _.clone(query)\n   74  \t\t\t\tdisplay.collection = display.collection._name\n   75: \t\t\t\tthis.query = Object.freeze(display)\n   76  \n   77: \t\t\t\treturn query\n   78  \t\t\t}\n   79  \t\t}\n\n/home/simon/Desktop/testing/client/components/infinite.vue:\n   22  \t\t\t\treturn {\n   23  \t\t\t\t\tcollection:Test,\n   24: \t\t\t\t\tquery:{\n   25  \t\t\t\t\t\t_id:1,\n   26  \t\t\t\t\t\tcolor:1,\n\n9 matches across 2 files\n",
			"settings":
			{
				"buffer_size": 141673,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "TESTING.sublime-project",
			"settings":
			{
				"buffer_size": 45,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 357.0,
		"last_filter": "log",
		"selected_items":
		[
			[
				"log",
				"git: log current file"
			],
			[
				"push fo",
				"git: push (force)"
			],
			[
				"git pu",
				"git: push (force)"
			],
			[
				"git pus",
				"git: push (force)"
			],
			[
				"git sta",
				"git: status"
			],
			[
				"fetch",
				"git: fetch"
			],
			[
				"pull",
				"git: pull"
			],
			[
				"diff",
				"git: diff current file"
			],
			[
				"force",
				"git: push (force)"
			],
			[
				"key",
				"Preferences: Key Bindings"
			],
			[
				"stat",
				"git: status"
			],
			[
				"git stats",
				"git: status"
			],
			[
				"push",
				"git: push (force)"
			],
			[
				"amend",
				"git: amend previous commit"
			],
			[
				"git stage",
				"git: quick stage"
			],
			[
				"git co",
				"git: quick commit"
			],
			[
				"git st",
				"git: status"
			],
			[
				"git p",
				"git: push"
			],
			[
				"gitco",
				"git: commit including unstaged files"
			],
			[
				"git stat",
				"git: status"
			],
			[
				"sta",
				"git: status"
			],
			[
				"force ",
				"git: push (force)"
			],
			[
				"git mer",
				"git: abort merge"
			],
			[
				"git resol",
				"git: restart merge for file..."
			],
			[
				"git",
				"git: merge"
			],
			[
				"git pull",
				"git: pull"
			],
			[
				"git a",
				"git: amend previous commit"
			],
			[
				"",
				"Boxy Theme: Configuration"
			],
			[
				"box",
				"Boxy Theme: Configuration"
			],
			[
				"Package Control: ",
				"Package Control: Remove Package"
			],
			[
				"commit",
				"git: commit including unstaged files"
			],
			[
				"git file",
				"git: log current file"
			],
			[
				"commi",
				"git: commit including unstaged files"
			],
			[
				"disa",
				"Package Control: Disable Package"
			],
			[
				"boxy",
				"Boxy Theme: Configuration"
			],
			[
				"DI",
				"Package Control: Disable Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"bo",
				"Boxy Theme: Preferences"
			],
			[
				"Package Control: inst",
				"Package Control: Install Package"
			],
			[
				"mat",
				"Material Theme: Configuration"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"Package Control: in",
				"Package Control: Install Package"
			],
			[
				"Package Control: ins",
				"Package Control: Install Package"
			],
			[
				"Package Control: remove package",
				"Package Control: Remove Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 585.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/simon/Desktop/testing",
		"/home/simon/Desktop/testing/.meteor",
		"/home/simon/Desktop/testing/both",
		"/home/simon/Desktop/testing/client",
		"/home/simon/Desktop/testing/client/components",
		"/home/simon/Desktop/testing/node_modules",
		"/home/simon/Desktop/testing/packages",
		"/home/simon/Desktop/testing/packages/grapher-vue"
	],
	"file_history":
	[
		"/home/simon/Desktop/testing/packages/grapher-vue/grapher-vue.js",
		"/home/simon/Desktop/testing/packages/grapher/lib/query/query.client.js",
		"/home/simon/Desktop/testing/.vueignore",
		"/home/simon/Desktop/testing/package.json",
		"/home/simon/Desktop/testing/client/main.js",
		"/home/simon/Desktop/testing/.meteor/packages",
		"/home/simon/Desktop/testing/both/collection.js",
		"/home/simon/Desktop/testing/client/components/item.vue",
		"/home/simon/Desktop/testing/.gitignore",
		"/home/simon/Desktop/testing/client/components/infinite.vue",
		"/home/simon/Desktop/testing/client/style.styl",
		"/home/simon/Desktop/testing/client/components/grapher.vue",
		"/home/simon/Desktop/testing/packages/grapher/lib/query/lib/prepareForDelivery.js",
		"/home/simon/Desktop/testing/client/components/layout.vue",
		"/home/simon/Desktop/testing/client/components/tracker.vue",
		"/home/simon/Desktop/testing/node_modules/vue-meteor-tracker/lib/vue-plugin.js",
		"/home/simon/Desktop/testing/README.md",
		"/home/simon/Desktop/testing/node_modules/vue-meteor-tracker/package.json",
		"/home/simon/Desktop/testing/packages/grapher-vue/package.js",
		"/home/simon/Desktop/testing/packages/grapher-vue/README.md",
		"/home/simon/Desktop/testing/packages/grapher/lib/query/lib/createGraph.js",
		"/home/simon/Desktop/testing/packages/grapher/lib/query/testing/server.test.js",
		"/home/simon/.config/sublime-text-3/Packages/User/SuperMonokai.tmTheme",
		"/home/simon/Desktop/testing/client/components/test.vue",
		"/home/simon/.config/sublime-text-3/Packages/User/SideBarEnhancements/Open With/Side Bar.sublime-menu",
		"/home/simon/Desktop/testing/client/grapher.js",
		"/home/simon/Desktop/testing/packages/grapher-vue/grapher-vue-tests.js",
		"/home/simon/Desktop/testing/.eslintrc",
		"/home/simon/Desktop/testing/lib/collection.js",
		"/home/simon/Desktop/testing/client/components/tree-view.vue",
		"/home/simon/Desktop/testing/client/components/tree-view-item.vue",
		"/home/simon/Desktop/testing/server/main.js",
		"/home/simon/Desktop/Keymaster/lib/_first/settings.js",
		"/home/simon/Desktop/Keymaster/client/reactiveTable.js",
		"/home/simon/Desktop/Keymaster/client/handlebars.js",
		"/home/simon/Desktop/Keymaster/lib/_first/shared.js",
		"/usr/bin/syncthing",
		"/home/simon/Desktop/Projects/buildserver.sh",
		"/home/simon/Desktop/Keymaster/client/functions.js",
		"/home/simon/Desktop/Keymaster/client/main.js",
		"/home/simon/Desktop/Keymaster/client/push.js",
		"/home/simon/Desktop/Keymaster/client/translate.js",
		"/home/simon/Desktop/Keymaster/client/ztinymce.js",
		"/home/simon/Desktop/Keymaster/client/templates/GPS.js",
		"/home/simon/Desktop/Keymaster/client/templates/adminEditItem.js",
		"/home/simon/Desktop/Keymaster/client/templates/adminItems.js",
		"/home/simon/Desktop/Keymaster/client/templates/categories.js",
		"/home/simon/Desktop/Keymaster/client/templates/changePassword.js",
		"/home/simon/Desktop/Keymaster/client/templates/chat.js",
		"/home/simon/Desktop/Keymaster/client/templates/checkOut.js",
		"/home/simon/Desktop/Keymaster/client/templates/checkin.js",
		"/home/simon/Desktop/Keymaster/client/templates/checkinLog.js",
		"/home/simon/Desktop/Keymaster/client/templates/dailyKeys.js",
		"/home/simon/Desktop/Keymaster/client/templates/dictionary.js",
		"/home/simon/Desktop/Keymaster/client/templates/documents.js",
		"/home/simon/Desktop/Keymaster/client/templates/editFaq.js",
		"/home/simon/Desktop/Keymaster/client/templates/feedback.js",
		"/home/simon/Desktop/Keymaster/client/templates/itemInfo.js",
		"/home/simon/Desktop/Keymaster/client/templates/log.js",
		"/home/simon/Desktop/Keymaster/client/templates/login.js",
		"/home/simon/Desktop/Keymaster/client/templates/missionMap.js",
		"/home/simon/Desktop/Keymaster/client/templates/myItems.js",
		"/home/simon/Desktop/Keymaster/client/templates/quiz.js",
		"/home/simon/Desktop/Keymaster/client/templates/quizAdmin.js",
		"/home/simon/Desktop/Keymaster/client/templates/registerInspection.js",
		"/home/simon/Desktop/Keymaster/client/templates/requests.js",
		"/home/simon/Desktop/Keymaster/client/templates/returnItem.js",
		"/home/simon/Desktop/Keymaster/client/templates/reviews.js",
		"/home/simon/Desktop/Keymaster/client/templates/roles.js",
		"/home/simon/Desktop/Keymaster/client/templates/serverlog.js",
		"/home/simon/Desktop/Keymaster/client/templates/settings.js",
		"/home/simon/Desktop/Keymaster/client/templates/terms.js",
		"/home/simon/Desktop/Keymaster/client/templates/todos.js",
		"/home/simon/Desktop/Keymaster/client/templates/userInfo.js",
		"/home/simon/Desktop/Keymaster/client/templates/users.js",
		"/home/simon/Desktop/Keymaster/client/templates/customerportal/cancelMission.js",
		"/home/simon/Desktop/Keymaster/client/templates/customerportal/customerContacts.js",
		"/home/simon/Desktop/Keymaster/client/templates/customerportal/customerInfo.js",
		"/home/simon/Desktop/Keymaster/client/templates/customerportal/customerInvoices.js",
		"/home/simon/Desktop/Keymaster/client/templates/customerportal/faq.js",
		"/home/simon/Desktop/Keymaster/client/templates/customerportal/invoicePopup.js",
		"/home/simon/Desktop/Keymaster/client/templates/customerportal/missionPopup.js",
		"/home/simon/Desktop/Keymaster/client/templates/customerportal/news.js",
		"/home/simon/Desktop/Keymaster/client/templates/layout/calculator.js",
		"/home/simon/Desktop/Keymaster/client/templates/layout/chart.js",
		"/home/simon/Desktop/Keymaster/client/templates/layout/components.js",
		"/home/simon/Desktop/Keymaster/client/templates/layout/contextMenu.js",
		"/home/simon/Desktop/Keymaster/client/templates/layout/editor.js",
		"/home/simon/Desktop/Keymaster/client/templates/layout/fileSidebar.js",
		"/home/simon/Desktop/Keymaster/client/templates/layout/files.js",
		"/home/simon/Desktop/Keymaster/client/templates/layout/grouper.js",
		"/home/simon/Desktop/Keymaster/client/templates/layout/header.js",
		"/home/simon/Desktop/Keymaster/client/templates/layout/language.js",
		"/home/simon/Desktop/Keymaster/client/templates/layout/layout.js",
		"/home/simon/Desktop/Keymaster/client/templates/layout/modal.js",
		"/home/simon/Desktop/Keymaster/client/templates/layout/select.js",
		"/home/simon/Desktop/Keymaster/lib/collections.js",
		"/home/simon/Desktop/Keymaster/lib/methods.js",
		"/home/simon/Desktop/Keymaster/lib/router.js",
		"/home/simon/Desktop/Keymaster/lib/_first/functions.js",
		"/home/simon/Desktop/Keymaster/lib/collections/documents.js",
		"/home/simon/Desktop/Keymaster/lib/collections/files.js",
		"/home/simon/Desktop/Keymaster/lib/collections/items.js",
		"/home/simon/Desktop/Keymaster/lib/collections/missions.js",
		"/home/simon/Desktop/Keymaster/lib/collections/quiz.js",
		"/home/simon/Desktop/Keymaster/lib/collections/requests.js",
		"/home/simon/Desktop/Keymaster/lib/collections/reviews.js",
		"/home/simon/Desktop/Keymaster/lib/collections/todos.js",
		"/home/simon/Desktop/Keymaster/lib/collections/users.js",
		"/home/simon/Desktop/Keymaster/server/checkMissions.js",
		"/home/simon/Desktop/Keymaster/server/checkNeededKeys.js",
		"/home/simon/Desktop/Keymaster/server/cronJobs.js",
		"/home/simon/Desktop/Keymaster/server/geocode.js",
		"/home/simon/Desktop/Keymaster/server/messages.js",
		"/home/simon/Desktop/Keymaster/server/methods.js",
		"/home/simon/Desktop/Keymaster/server/publications.js",
		"/home/simon/Desktop/Keymaster/server/startup.js",
		"/home/simon/Desktop/Keymaster/server/stuff.js",
		"/home/simon/Desktop/Keymaster/server/timewave.js",
		"/home/simon/Desktop/Keymaster/server/translate.js",
		"/home/simon/Desktop/Keymaster/server/lib/score.js",
		"/home/simon/Desktop/Keymaster/client/style.styl",
		"/home/simon/Desktop/Keymaster/server/zzz.js",
		"/home/simon/Desktop/Keymaster/client/templates/editFaq.html",
		"/home/simon/Desktop/Keymaster/server/push.js",
		"/home/simon/Desktop/Keymaster/client/templates/users.html",
		"/home/simon/Desktop/Keymaster/client/templates/layout/sidebar.js",
		"/home/simon/Desktop/Keymaster/client/templates/layout/newVersion.js"
	],
	"find":
	{
		"height": 48.0
	},
	"find_in_files":
	{
		"height": 118.0,
		"where_history":
		[
			"",
			"/home/simon/Desktop/testing/packages/grapher/lib",
			"/packages/grapher/lib",
			"",
			"*.js",
			"",
			"*.js",
			"",
			"server/",
			"",
			"server/",
			"/server",
			"",
			"server/",
			"/server",
			"",
			"-*.txt",
			"",
			"server/",
			"",
			"lib/",
			"",
			"lib/",
			"server/",
			"/server/",
			"/server",
			"",
			"c",
			"client",
			"/client",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"query",
			"data",
			"where",
			"getlink",
			"_transform",
			"_helpers",
			"results",
			"meteor.call",
			"call",
			"getinternet",
			"autorun",
			"span",
			"$postfilter",
			"$postoption",
			"fetch",
			"\t",
			"_",
			"$autorun",
			"$track",
			"definereac",
			"definereactive",
			"_this.",
			"$options",
			"$grapher",
			"$autorun",
			"aut",
			"$options.meteor",
			"params",
			"cancel",
			"settingsready",
			"setting = funct",
			"settings = funct",
			"settings",
			"settingsReady",
			"#if session",
			"subscribe('settings",
			".go",
			"dl",
			"{{>edit",
			"{{> edit",
			"type",
			";",
			"push.send",
			"subscribe('faq",
			"templet",
			"var ",
			";}",
			"subscribe('faq",
			"upload",
			";\\n",
			"tmpl",
			"id",
			"'schedules'",
			"#week",
			"schedule",
			"30",
			"11",
			"arguments",
			"#customer",
			"Todos.update",
			"Todos.",
			"sharedtodos",
			"syncedCron",
			"Todos.remove",
			"console",
			"highlight",
			"label",
			"template name=\"files",
			"cancel",
			"kadira",
			"setting('com",
			"E6DB74",
			"c88fe8",
			"c88dc0",
			"66D9EF",
			"function",
			"c88dc0",
			"F92672",
			"AE81FF",
			"A6E22E",
			"E6DB74",
			"202224",
			"faqs",
			"created",
			"edit",
			"editing",
			"getfin",
			"observe",
			"syncedcron.add",
			"subscribe('files",
			"stadalliansen",
			"order",
			"type",
			": function (",
			":function (",
			": function(",
			":function(",
			"@.*",
			".*:.*",
			".userline",
			"template name=\"",
			".*:.*",
			"rovar",
			"rovare",
			"extra",
			"name=\"userline",
			"name=userline",
			"userline",
			"push.send",
			"user not found",
			"loginwithpassword",
			"createuser",
			"contextmenu",
			"pad",
			"pathfor",
			"print",
			"azure",
			"&amp;",
			"setting(",
			"permission",
			"subscribe('sect",
			"sections",
			"section obs",
			"wrap",
			"unwrap",
			"article",
			"micro",
			"azure"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"  ",
			"_grapher",
			"let ",
			"}",
			"\\n",
			"c2ea82",
			"c88fe8",
			"74a9ff",
			"c88dc0",
			"fa7255",
			"ffcc63",
			"b8e988",
			"263239",
			"(",
			"",
			"\\\"",
			" ",
			"",
			" ",
			"",
			"src=\"/",
			"\t",
			"users",
			"quizEdit",
			"driver:Shared",
			"fileSidebar",
			"role:{$ne:'customer'}",
			"background-image",
			"Subheading",
			"subheading",
			"FlowRouter.getRouteName()",
			"FlowRouter.current().route.name",
			"Flow",
			"FlowRouter",
			"",
			"6px",
			"",
			"margin-bottom: 1px;",
			"5px",
			"",
			"outline",
			"user()",
			"\t",
			"Colors.",
			"\\n",
			"','",
			"",
			"','",
			"",
			"^not ",
			"",
			"\"",
			"OS-X",
			"OS X El Capitan",
			"",
			"'",
			"background lgrey4",
			"\t",
			"background",
			"0px 1px 3px",
			"\t",
			":'mobile/icon",
			":'icon",
			"",
			"\t",
			"'",
			",",
			",'",
			"\t",
			"",
			"\t",
			"','",
			"",
			"\t",
			"user()",
			"attr('name'",
			"quizEdit",
			"layout",
			" ",
			"\t",
			"bold true",
			"",
			")\"",
			"\")",
			"\"hsl",
			"\"),",
			"),",
			": ",
			"arg",
			"222222",
			"notes",
			"user",
			"h4",
			"h3",
			"",
			"\t",
			"",
			"  ",
			"6",
			"",
			"to",
			"from",
			"\t",
			"radius 4px",
			"alert",
			"me",
			"td",
			"\t",
			"ease-out",
			"Meteor.publish",
			"PublishSecure",
			"\t",
			"class=\"article\"",
			"interval",
			"username",
			"nowrap",
			"time",
			"ally",
			"opponent",
			"username",
			"Items.",
			"stuff",
			":'",
			"\t",
			"",
			"Requests",
			"Request",
			"request"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 141673,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										161,
										166
									],
									[
										184,
										189
									],
									[
										311,
										316
									],
									[
										390,
										395
									],
									[
										511,
										516
									],
									[
										645,
										650
									],
									[
										725,
										730
									],
									[
										782,
										787
									],
									[
										933,
										938
									],
									[
										1173,
										1178
									],
									[
										1196,
										1201
									],
									[
										1323,
										1328
									],
									[
										1402,
										1407
									],
									[
										1523,
										1528
									],
									[
										1657,
										1662
									],
									[
										1737,
										1742
									],
									[
										1794,
										1799
									],
									[
										1945,
										1950
									],
									[
										2242,
										2247
									],
									[
										2329,
										2334
									],
									[
										2355,
										2360
									],
									[
										2473,
										2478
									],
									[
										2633,
										2638
									],
									[
										2961,
										2966
									],
									[
										3195,
										3200
									],
									[
										3237,
										3242
									],
									[
										3293,
										3298
									],
									[
										3380,
										3385
									],
									[
										3407,
										3412
									],
									[
										3419,
										3424
									],
									[
										3487,
										3492
									],
									[
										3519,
										3524
									],
									[
										3537,
										3542
									],
									[
										3646,
										3651
									],
									[
										3854,
										3859
									],
									[
										3896,
										3901
									],
									[
										3952,
										3957
									],
									[
										4006,
										4011
									],
									[
										4093,
										4098
									],
									[
										4120,
										4125
									],
									[
										4132,
										4137
									],
									[
										4200,
										4205
									],
									[
										4232,
										4237
									],
									[
										4250,
										4255
									],
									[
										4447,
										4452
									],
									[
										4482,
										4487
									],
									[
										4643,
										4648
									],
									[
										4729,
										4734
									],
									[
										4800,
										4805
									],
									[
										4870,
										4875
									],
									[
										4910,
										4915
									],
									[
										4979,
										4984
									],
									[
										5060,
										5065
									],
									[
										5149,
										5154
									],
									[
										5225,
										5230
									],
									[
										5434,
										5439
									],
									[
										5459,
										5464
									],
									[
										5506,
										5511
									],
									[
										5640,
										5645
									],
									[
										5782,
										5787
									],
									[
										5842,
										5847
									],
									[
										5957,
										5962
									],
									[
										6008,
										6013
									],
									[
										6014,
										6019
									],
									[
										6059,
										6064
									],
									[
										6107,
										6112
									],
									[
										6166,
										6171
									],
									[
										6222,
										6227
									],
									[
										6357,
										6362
									],
									[
										6627,
										6632
									],
									[
										6808,
										6813
									],
									[
										6875,
										6880
									],
									[
										6940,
										6945
									],
									[
										7252,
										7257
									],
									[
										7481,
										7486
									],
									[
										7655,
										7660
									],
									[
										7778,
										7783
									],
									[
										8063,
										8068
									],
									[
										8082,
										8087
									],
									[
										8211,
										8216
									],
									[
										8460,
										8465
									],
									[
										8479,
										8484
									],
									[
										8615,
										8620
									],
									[
										8809,
										8814
									],
									[
										8856,
										8861
									],
									[
										8875,
										8880
									],
									[
										8965,
										8970
									],
									[
										9172,
										9177
									],
									[
										9197,
										9202
									],
									[
										9273,
										9278
									],
									[
										9445,
										9450
									],
									[
										9643,
										9648
									],
									[
										9673,
										9678
									],
									[
										9749,
										9754
									],
									[
										9905,
										9910
									],
									[
										10094,
										10099
									],
									[
										10113,
										10118
									],
									[
										10228,
										10233
									],
									[
										10420,
										10425
									],
									[
										10444,
										10449
									],
									[
										10569,
										10574
									],
									[
										10803,
										10808
									],
									[
										10827,
										10832
									],
									[
										10967,
										10972
									],
									[
										11143,
										11148
									],
									[
										11501,
										11506
									],
									[
										11673,
										11678
									],
									[
										11684,
										11689
									],
									[
										12011,
										12016
									],
									[
										12157,
										12162
									],
									[
										12176,
										12181
									],
									[
										12323,
										12328
									],
									[
										12539,
										12544
									],
									[
										12566,
										12571
									],
									[
										12735,
										12740
									],
									[
										12750,
										12755
									],
									[
										12762,
										12767
									],
									[
										12853,
										12858
									],
									[
										12917,
										12922
									],
									[
										12950,
										12955
									],
									[
										13079,
										13084
									],
									[
										13094,
										13099
									],
									[
										13106,
										13111
									],
									[
										13193,
										13198
									],
									[
										13248,
										13253
									],
									[
										13312,
										13317
									],
									[
										13352,
										13357
									],
									[
										13506,
										13511
									],
									[
										13572,
										13577
									],
									[
										13666,
										13671
									],
									[
										13803,
										13808
									],
									[
										13816,
										13821
									],
									[
										13954,
										13959
									],
									[
										14160,
										14165
									],
									[
										14225,
										14230
									],
									[
										14296,
										14301
									],
									[
										14414,
										14419
									],
									[
										14474,
										14479
									],
									[
										14669,
										14674
									],
									[
										14862,
										14867
									],
									[
										14887,
										14892
									],
									[
										14921,
										14926
									],
									[
										14946,
										14951
									],
									[
										14985,
										14990
									],
									[
										15046,
										15051
									],
									[
										15059,
										15064
									],
									[
										15104,
										15109
									],
									[
										15117,
										15122
									],
									[
										15174,
										15179
									],
									[
										15305,
										15310
									],
									[
										15371,
										15376
									],
									[
										15428,
										15433
									],
									[
										15555,
										15560
									],
									[
										15585,
										15590
									],
									[
										15723,
										15728
									],
									[
										15999,
										16004
									],
									[
										16041,
										16046
									],
									[
										16200,
										16205
									],
									[
										16220,
										16225
									],
									[
										16367,
										16372
									],
									[
										16437,
										16442
									],
									[
										16513,
										16518
									],
									[
										16582,
										16587
									],
									[
										16636,
										16641
									],
									[
										16821,
										16826
									],
									[
										16893,
										16898
									],
									[
										17086,
										17091
									],
									[
										17417,
										17422
									],
									[
										17430,
										17435
									],
									[
										17733,
										17738
									],
									[
										17808,
										17813
									],
									[
										17914,
										17919
									],
									[
										17928,
										17933
									],
									[
										18069,
										18074
									],
									[
										18269,
										18274
									],
									[
										18336,
										18341
									],
									[
										18417,
										18422
									],
									[
										18632,
										18637
									],
									[
										18713,
										18718
									],
									[
										18916,
										18921
									],
									[
										18930,
										18935
									],
									[
										19086,
										19091
									],
									[
										19260,
										19265
									],
									[
										19436,
										19441
									],
									[
										19568,
										19573
									],
									[
										19742,
										19747
									],
									[
										19967,
										19972
									],
									[
										20042,
										20047
									],
									[
										20155,
										20160
									],
									[
										20169,
										20174
									],
									[
										20314,
										20319
									],
									[
										20438,
										20443
									],
									[
										20451,
										20456
									],
									[
										20460,
										20465
									],
									[
										20504,
										20509
									],
									[
										20685,
										20690
									],
									[
										20699,
										20704
									],
									[
										20853,
										20858
									],
									[
										21040,
										21045
									],
									[
										21196,
										21201
									],
									[
										21415,
										21420
									],
									[
										21500,
										21505
									],
									[
										21659,
										21664
									],
									[
										21673,
										21678
									],
									[
										21703,
										21708
									],
									[
										21723,
										21728
									],
									[
										21734,
										21739
									],
									[
										21764,
										21769
									],
									[
										21789,
										21794
									],
									[
										21951,
										21956
									],
									[
										22077,
										22082
									],
									[
										22253,
										22258
									],
									[
										22279,
										22284
									],
									[
										22529,
										22534
									],
									[
										22752,
										22757
									],
									[
										22765,
										22770
									],
									[
										22830,
										22835
									],
									[
										22949,
										22954
									],
									[
										23065,
										23070
									],
									[
										23129,
										23134
									],
									[
										23255,
										23260
									],
									[
										23272,
										23277
									],
									[
										23348,
										23353
									],
									[
										23369,
										23374
									],
									[
										23415,
										23420
									],
									[
										23468,
										23473
									],
									[
										23624,
										23629
									],
									[
										23638,
										23643
									],
									[
										23720,
										23725
									],
									[
										23784,
										23789
									],
									[
										23932,
										23937
									],
									[
										23949,
										23954
									],
									[
										24002,
										24007
									],
									[
										24023,
										24028
									],
									[
										24069,
										24074
									],
									[
										24100,
										24105
									],
									[
										24216,
										24221
									],
									[
										24429,
										24434
									],
									[
										24612,
										24617
									],
									[
										24890,
										24895
									],
									[
										24939,
										24944
									],
									[
										25130,
										25135
									],
									[
										25308,
										25313
									],
									[
										25328,
										25333
									],
									[
										25357,
										25362
									],
									[
										25377,
										25382
									],
									[
										25411,
										25416
									],
									[
										25467,
										25472
									],
									[
										25475,
										25480
									],
									[
										25515,
										25520
									],
									[
										25523,
										25528
									],
									[
										25575,
										25580
									],
									[
										25806,
										25811
									],
									[
										25855,
										25860
									],
									[
										26027,
										26032
									],
									[
										26251,
										26256
									],
									[
										26383,
										26388
									],
									[
										26397,
										26402
									],
									[
										26526,
										26531
									],
									[
										26712,
										26717
									],
									[
										26726,
										26731
									],
									[
										26870,
										26875
									],
									[
										27017,
										27022
									],
									[
										27214,
										27219
									],
									[
										27228,
										27233
									],
									[
										27357,
										27362
									],
									[
										27524,
										27529
									],
									[
										27716,
										27721
									],
									[
										27730,
										27735
									],
									[
										27862,
										27867
									],
									[
										28029,
										28034
									],
									[
										28227,
										28232
									],
									[
										28241,
										28246
									],
									[
										28371,
										28376
									],
									[
										28519,
										28524
									],
									[
										28718,
										28723
									],
									[
										28732,
										28737
									],
									[
										28864,
										28869
									],
									[
										29012,
										29017
									],
									[
										29178,
										29183
									],
									[
										29192,
										29197
									],
									[
										29328,
										29333
									],
									[
										29457,
										29462
									],
									[
										29616,
										29621
									],
									[
										29786,
										29791
									],
									[
										29800,
										29805
									],
									[
										29917,
										29922
									],
									[
										30154,
										30159
									],
									[
										30168,
										30173
									],
									[
										30285,
										30290
									],
									[
										30483,
										30488
									],
									[
										30497,
										30502
									],
									[
										30637,
										30642
									],
									[
										30823,
										30828
									],
									[
										31048,
										31053
									],
									[
										31222,
										31227
									],
									[
										31399,
										31404
									],
									[
										31614,
										31619
									],
									[
										31772,
										31777
									],
									[
										31978,
										31983
									],
									[
										32193,
										32198
									],
									[
										32324,
										32329
									],
									[
										32522,
										32527
									],
									[
										32652,
										32657
									],
									[
										32832,
										32837
									],
									[
										33107,
										33112
									],
									[
										33121,
										33126
									],
									[
										33255,
										33260
									],
									[
										33355,
										33360
									],
									[
										33537,
										33542
									],
									[
										33551,
										33556
									],
									[
										33691,
										33696
									],
									[
										33791,
										33796
									],
									[
										33973,
										33978
									],
									[
										33987,
										33992
									],
									[
										34120,
										34125
									],
									[
										34220,
										34225
									],
									[
										34394,
										34399
									],
									[
										34408,
										34413
									],
									[
										34544,
										34549
									],
									[
										34644,
										34649
									],
									[
										34829,
										34834
									],
									[
										34843,
										34848
									],
									[
										34985,
										34990
									],
									[
										35085,
										35090
									],
									[
										35277,
										35282
									],
									[
										35291,
										35296
									],
									[
										35434,
										35439
									],
									[
										35534,
										35539
									],
									[
										35719,
										35724
									],
									[
										35733,
										35738
									],
									[
										35868,
										35873
									],
									[
										35968,
										35973
									],
									[
										36153,
										36158
									],
									[
										36167,
										36172
									],
									[
										36304,
										36309
									],
									[
										36404,
										36409
									],
									[
										36585,
										36590
									],
									[
										36781,
										36786
									],
									[
										36973,
										36978
									],
									[
										37171,
										37176
									],
									[
										37354,
										37359
									],
									[
										37551,
										37556
									],
									[
										37761,
										37766
									],
									[
										37965,
										37970
									],
									[
										38161,
										38166
									],
									[
										38348,
										38353
									],
									[
										38491,
										38496
									],
									[
										38610,
										38615
									],
									[
										38659,
										38664
									],
									[
										38673,
										38678
									],
									[
										38813,
										38818
									],
									[
										38929,
										38934
									],
									[
										39095,
										39100
									],
									[
										39387,
										39392
									],
									[
										39583,
										39588
									],
									[
										39788,
										39793
									],
									[
										39802,
										39807
									],
									[
										39965,
										39970
									],
									[
										40142,
										40147
									],
									[
										40347,
										40352
									],
									[
										40531,
										40536
									],
									[
										40738,
										40743
									],
									[
										40925,
										40930
									],
									[
										41122,
										41127
									],
									[
										41325,
										41330
									],
									[
										41454,
										41459
									],
									[
										41661,
										41666
									],
									[
										41791,
										41796
									],
									[
										41978,
										41983
									],
									[
										42189,
										42194
									],
									[
										42408,
										42413
									],
									[
										42608,
										42613
									],
									[
										42787,
										42792
									],
									[
										42801,
										42806
									],
									[
										42941,
										42946
									],
									[
										43107,
										43112
									],
									[
										43121,
										43126
									],
									[
										43257,
										43262
									],
									[
										43336,
										43341
									],
									[
										43350,
										43355
									],
									[
										43487,
										43492
									],
									[
										43616,
										43621
									],
									[
										43630,
										43635
									],
									[
										43766,
										43771
									],
									[
										44194,
										44199
									],
									[
										44293,
										44298
									],
									[
										44345,
										44350
									],
									[
										44772,
										44777
									],
									[
										44834,
										44839
									],
									[
										45068,
										45073
									],
									[
										45282,
										45287
									],
									[
										45563,
										45568
									],
									[
										45630,
										45635
									],
									[
										45643,
										45648
									],
									[
										45684,
										45689
									],
									[
										45726,
										45731
									],
									[
										45746,
										45751
									],
									[
										45804,
										45809
									],
									[
										45842,
										45847
									],
									[
										45899,
										45904
									],
									[
										46032,
										46037
									],
									[
										46164,
										46169
									],
									[
										46257,
										46262
									],
									[
										46443,
										46448
									],
									[
										46483,
										46488
									],
									[
										46650,
										46655
									],
									[
										46756,
										46761
									],
									[
										46960,
										46965
									],
									[
										47120,
										47125
									],
									[
										47129,
										47134
									],
									[
										47387,
										47392
									],
									[
										47410,
										47415
									],
									[
										47537,
										47542
									],
									[
										47616,
										47621
									],
									[
										47737,
										47742
									],
									[
										47871,
										47876
									],
									[
										47951,
										47956
									],
									[
										48008,
										48013
									],
									[
										48159,
										48164
									],
									[
										48456,
										48461
									],
									[
										48543,
										48548
									],
									[
										48569,
										48574
									],
									[
										48687,
										48692
									],
									[
										48847,
										48852
									],
									[
										49175,
										49180
									],
									[
										49409,
										49414
									],
									[
										49451,
										49456
									],
									[
										49507,
										49512
									],
									[
										49594,
										49599
									],
									[
										49621,
										49626
									],
									[
										49633,
										49638
									],
									[
										49701,
										49706
									],
									[
										49733,
										49738
									],
									[
										49751,
										49756
									],
									[
										49860,
										49865
									],
									[
										50068,
										50073
									],
									[
										50110,
										50115
									],
									[
										50166,
										50171
									],
									[
										50220,
										50225
									],
									[
										50307,
										50312
									],
									[
										50334,
										50339
									],
									[
										50346,
										50351
									],
									[
										50414,
										50419
									],
									[
										50446,
										50451
									],
									[
										50464,
										50469
									],
									[
										50661,
										50666
									],
									[
										50696,
										50701
									],
									[
										50857,
										50862
									],
									[
										50943,
										50948
									],
									[
										51014,
										51019
									],
									[
										51084,
										51089
									],
									[
										51124,
										51129
									],
									[
										51193,
										51198
									],
									[
										51274,
										51279
									],
									[
										51363,
										51368
									],
									[
										51439,
										51444
									],
									[
										51648,
										51653
									],
									[
										51673,
										51678
									],
									[
										51720,
										51725
									],
									[
										51854,
										51859
									],
									[
										51996,
										52001
									],
									[
										52056,
										52061
									],
									[
										52171,
										52176
									],
									[
										52222,
										52227
									],
									[
										52228,
										52233
									],
									[
										52273,
										52278
									],
									[
										52321,
										52326
									],
									[
										52380,
										52385
									],
									[
										52436,
										52441
									],
									[
										52571,
										52576
									],
									[
										52841,
										52846
									],
									[
										53022,
										53027
									],
									[
										53089,
										53094
									],
									[
										53154,
										53159
									],
									[
										53466,
										53471
									],
									[
										53695,
										53700
									],
									[
										53869,
										53874
									],
									[
										53992,
										53997
									],
									[
										54277,
										54282
									],
									[
										54296,
										54301
									],
									[
										54425,
										54430
									],
									[
										54674,
										54679
									],
									[
										54693,
										54698
									],
									[
										54829,
										54834
									],
									[
										55023,
										55028
									],
									[
										55070,
										55075
									],
									[
										55089,
										55094
									],
									[
										55179,
										55184
									],
									[
										55386,
										55391
									],
									[
										55411,
										55416
									],
									[
										55487,
										55492
									],
									[
										55659,
										55664
									],
									[
										55857,
										55862
									],
									[
										55887,
										55892
									],
									[
										55963,
										55968
									],
									[
										56119,
										56124
									],
									[
										56308,
										56313
									],
									[
										56327,
										56332
									],
									[
										56442,
										56447
									],
									[
										56634,
										56639
									],
									[
										56658,
										56663
									],
									[
										56783,
										56788
									],
									[
										57017,
										57022
									],
									[
										57041,
										57046
									],
									[
										57181,
										57186
									],
									[
										57357,
										57362
									],
									[
										57715,
										57720
									],
									[
										57887,
										57892
									],
									[
										57898,
										57903
									],
									[
										58225,
										58230
									],
									[
										58371,
										58376
									],
									[
										58390,
										58395
									],
									[
										58537,
										58542
									],
									[
										58753,
										58758
									],
									[
										58780,
										58785
									],
									[
										58949,
										58954
									],
									[
										58964,
										58969
									],
									[
										58976,
										58981
									],
									[
										59067,
										59072
									],
									[
										59131,
										59136
									],
									[
										59164,
										59169
									],
									[
										59293,
										59298
									],
									[
										59308,
										59313
									],
									[
										59320,
										59325
									],
									[
										59407,
										59412
									],
									[
										59462,
										59467
									],
									[
										59526,
										59531
									],
									[
										59566,
										59571
									],
									[
										59720,
										59725
									],
									[
										59786,
										59791
									],
									[
										59880,
										59885
									],
									[
										60017,
										60022
									],
									[
										60030,
										60035
									],
									[
										60168,
										60173
									],
									[
										60374,
										60379
									],
									[
										60439,
										60444
									],
									[
										60510,
										60515
									],
									[
										60628,
										60633
									],
									[
										60688,
										60693
									],
									[
										60883,
										60888
									],
									[
										61076,
										61081
									],
									[
										61101,
										61106
									],
									[
										61135,
										61140
									],
									[
										61160,
										61165
									],
									[
										61199,
										61204
									],
									[
										61260,
										61265
									],
									[
										61273,
										61278
									],
									[
										61318,
										61323
									],
									[
										61331,
										61336
									],
									[
										61388,
										61393
									],
									[
										61519,
										61524
									],
									[
										61585,
										61590
									],
									[
										61642,
										61647
									],
									[
										61769,
										61774
									],
									[
										61799,
										61804
									],
									[
										61937,
										61942
									],
									[
										62213,
										62218
									],
									[
										62255,
										62260
									],
									[
										62414,
										62419
									],
									[
										62434,
										62439
									],
									[
										62581,
										62586
									],
									[
										62651,
										62656
									],
									[
										62727,
										62732
									],
									[
										62796,
										62801
									],
									[
										62850,
										62855
									],
									[
										63035,
										63040
									],
									[
										63107,
										63112
									],
									[
										63300,
										63305
									],
									[
										63631,
										63636
									],
									[
										63644,
										63649
									],
									[
										63947,
										63952
									],
									[
										64022,
										64027
									],
									[
										64128,
										64133
									],
									[
										64142,
										64147
									],
									[
										64283,
										64288
									],
									[
										64483,
										64488
									],
									[
										64550,
										64555
									],
									[
										64631,
										64636
									],
									[
										64846,
										64851
									],
									[
										64927,
										64932
									],
									[
										65130,
										65135
									],
									[
										65144,
										65149
									],
									[
										65300,
										65305
									],
									[
										65474,
										65479
									],
									[
										65650,
										65655
									],
									[
										65782,
										65787
									],
									[
										65956,
										65961
									],
									[
										66181,
										66186
									],
									[
										66256,
										66261
									],
									[
										66369,
										66374
									],
									[
										66383,
										66388
									],
									[
										66528,
										66533
									],
									[
										66652,
										66657
									],
									[
										66665,
										66670
									],
									[
										66674,
										66679
									],
									[
										66718,
										66723
									],
									[
										66899,
										66904
									],
									[
										66913,
										66918
									],
									[
										67067,
										67072
									],
									[
										67254,
										67259
									],
									[
										67410,
										67415
									],
									[
										67629,
										67634
									],
									[
										67714,
										67719
									],
									[
										67873,
										67878
									],
									[
										67887,
										67892
									],
									[
										67917,
										67922
									],
									[
										67937,
										67942
									],
									[
										67948,
										67953
									],
									[
										67978,
										67983
									],
									[
										68003,
										68008
									],
									[
										68165,
										68170
									],
									[
										68291,
										68296
									],
									[
										68467,
										68472
									],
									[
										68493,
										68498
									],
									[
										68743,
										68748
									],
									[
										68966,
										68971
									],
									[
										68979,
										68984
									],
									[
										69044,
										69049
									],
									[
										69163,
										69168
									],
									[
										69279,
										69284
									],
									[
										69343,
										69348
									],
									[
										69469,
										69474
									],
									[
										69486,
										69491
									],
									[
										69562,
										69567
									],
									[
										69583,
										69588
									],
									[
										69629,
										69634
									],
									[
										69682,
										69687
									],
									[
										69838,
										69843
									],
									[
										69852,
										69857
									],
									[
										69934,
										69939
									],
									[
										69998,
										70003
									],
									[
										70146,
										70151
									],
									[
										70163,
										70168
									],
									[
										70216,
										70221
									],
									[
										70237,
										70242
									],
									[
										70283,
										70288
									],
									[
										70314,
										70319
									],
									[
										70430,
										70435
									],
									[
										70643,
										70648
									],
									[
										70826,
										70831
									],
									[
										71104,
										71109
									],
									[
										71153,
										71158
									],
									[
										71344,
										71349
									],
									[
										71522,
										71527
									],
									[
										71542,
										71547
									],
									[
										71571,
										71576
									],
									[
										71591,
										71596
									],
									[
										71625,
										71630
									],
									[
										71681,
										71686
									],
									[
										71689,
										71694
									],
									[
										71729,
										71734
									],
									[
										71737,
										71742
									],
									[
										71789,
										71794
									],
									[
										72020,
										72025
									],
									[
										72069,
										72074
									],
									[
										72241,
										72246
									],
									[
										72465,
										72470
									],
									[
										72597,
										72602
									],
									[
										72611,
										72616
									],
									[
										72740,
										72745
									],
									[
										72926,
										72931
									],
									[
										72940,
										72945
									],
									[
										73084,
										73089
									],
									[
										73231,
										73236
									],
									[
										73428,
										73433
									],
									[
										73442,
										73447
									],
									[
										73571,
										73576
									],
									[
										73738,
										73743
									],
									[
										73930,
										73935
									],
									[
										73944,
										73949
									],
									[
										74076,
										74081
									],
									[
										74243,
										74248
									],
									[
										74441,
										74446
									],
									[
										74455,
										74460
									],
									[
										74585,
										74590
									],
									[
										74733,
										74738
									],
									[
										74932,
										74937
									],
									[
										74946,
										74951
									],
									[
										75078,
										75083
									],
									[
										75226,
										75231
									],
									[
										75392,
										75397
									],
									[
										75406,
										75411
									],
									[
										75542,
										75547
									],
									[
										75671,
										75676
									],
									[
										75830,
										75835
									],
									[
										76000,
										76005
									],
									[
										76014,
										76019
									],
									[
										76131,
										76136
									],
									[
										76368,
										76373
									],
									[
										76382,
										76387
									],
									[
										76499,
										76504
									],
									[
										76697,
										76702
									],
									[
										76711,
										76716
									],
									[
										76851,
										76856
									],
									[
										77037,
										77042
									],
									[
										77262,
										77267
									],
									[
										77436,
										77441
									],
									[
										77613,
										77618
									],
									[
										77828,
										77833
									],
									[
										77986,
										77991
									],
									[
										78192,
										78197
									],
									[
										78407,
										78412
									],
									[
										78538,
										78543
									],
									[
										78736,
										78741
									],
									[
										78866,
										78871
									],
									[
										79046,
										79051
									],
									[
										79321,
										79326
									],
									[
										79335,
										79340
									],
									[
										79469,
										79474
									],
									[
										79569,
										79574
									],
									[
										79751,
										79756
									],
									[
										79765,
										79770
									],
									[
										79905,
										79910
									],
									[
										80005,
										80010
									],
									[
										80187,
										80192
									],
									[
										80201,
										80206
									],
									[
										80334,
										80339
									],
									[
										80434,
										80439
									],
									[
										80608,
										80613
									],
									[
										80622,
										80627
									],
									[
										80758,
										80763
									],
									[
										80858,
										80863
									],
									[
										81043,
										81048
									],
									[
										81057,
										81062
									],
									[
										81199,
										81204
									],
									[
										81299,
										81304
									],
									[
										81491,
										81496
									],
									[
										81505,
										81510
									],
									[
										81648,
										81653
									],
									[
										81748,
										81753
									],
									[
										81933,
										81938
									],
									[
										81947,
										81952
									],
									[
										82082,
										82087
									],
									[
										82182,
										82187
									],
									[
										82367,
										82372
									],
									[
										82381,
										82386
									],
									[
										82518,
										82523
									],
									[
										82618,
										82623
									],
									[
										82799,
										82804
									],
									[
										82995,
										83000
									],
									[
										83187,
										83192
									],
									[
										83385,
										83390
									],
									[
										83568,
										83573
									],
									[
										83765,
										83770
									],
									[
										83975,
										83980
									],
									[
										84179,
										84184
									],
									[
										84375,
										84380
									],
									[
										84562,
										84567
									],
									[
										84705,
										84710
									],
									[
										84824,
										84829
									],
									[
										84873,
										84878
									],
									[
										84887,
										84892
									],
									[
										85027,
										85032
									],
									[
										85143,
										85148
									],
									[
										85309,
										85314
									],
									[
										85601,
										85606
									],
									[
										85797,
										85802
									],
									[
										86002,
										86007
									],
									[
										86016,
										86021
									],
									[
										86179,
										86184
									],
									[
										86356,
										86361
									],
									[
										86561,
										86566
									],
									[
										86745,
										86750
									],
									[
										86952,
										86957
									],
									[
										87139,
										87144
									],
									[
										87336,
										87341
									],
									[
										87539,
										87544
									],
									[
										87668,
										87673
									],
									[
										87875,
										87880
									],
									[
										88005,
										88010
									],
									[
										88192,
										88197
									],
									[
										88403,
										88408
									],
									[
										88622,
										88627
									],
									[
										88822,
										88827
									],
									[
										89001,
										89006
									],
									[
										89015,
										89020
									],
									[
										89155,
										89160
									],
									[
										89321,
										89326
									],
									[
										89335,
										89340
									],
									[
										89471,
										89476
									],
									[
										89550,
										89555
									],
									[
										89564,
										89569
									],
									[
										89701,
										89706
									],
									[
										89830,
										89835
									],
									[
										89844,
										89849
									],
									[
										89980,
										89985
									],
									[
										90408,
										90413
									],
									[
										90507,
										90512
									],
									[
										90559,
										90564
									],
									[
										90986,
										90991
									],
									[
										91048,
										91053
									],
									[
										91282,
										91287
									],
									[
										91496,
										91501
									],
									[
										91777,
										91782
									],
									[
										91844,
										91849
									],
									[
										91857,
										91862
									],
									[
										91898,
										91903
									],
									[
										91940,
										91945
									],
									[
										91960,
										91965
									],
									[
										92018,
										92023
									],
									[
										92056,
										92061
									],
									[
										92113,
										92118
									],
									[
										92246,
										92251
									],
									[
										92378,
										92383
									],
									[
										92471,
										92476
									],
									[
										92657,
										92662
									],
									[
										92697,
										92702
									],
									[
										92864,
										92869
									],
									[
										92970,
										92975
									],
									[
										93174,
										93179
									],
									[
										93334,
										93339
									],
									[
										93343,
										93348
									],
									[
										93601,
										93606
									],
									[
										93624,
										93629
									],
									[
										93751,
										93756
									],
									[
										93830,
										93835
									],
									[
										93951,
										93956
									],
									[
										94085,
										94090
									],
									[
										94165,
										94170
									],
									[
										94222,
										94227
									],
									[
										94373,
										94378
									],
									[
										94670,
										94675
									],
									[
										94757,
										94762
									],
									[
										94783,
										94788
									],
									[
										94901,
										94906
									],
									[
										95061,
										95066
									],
									[
										95389,
										95394
									],
									[
										95623,
										95628
									],
									[
										95665,
										95670
									],
									[
										95721,
										95726
									],
									[
										95808,
										95813
									],
									[
										95835,
										95840
									],
									[
										95847,
										95852
									],
									[
										95915,
										95920
									],
									[
										95947,
										95952
									],
									[
										95965,
										95970
									],
									[
										96074,
										96079
									],
									[
										96282,
										96287
									],
									[
										96324,
										96329
									],
									[
										96380,
										96385
									],
									[
										96434,
										96439
									],
									[
										96521,
										96526
									],
									[
										96548,
										96553
									],
									[
										96560,
										96565
									],
									[
										96628,
										96633
									],
									[
										96660,
										96665
									],
									[
										96678,
										96683
									],
									[
										96875,
										96880
									],
									[
										96910,
										96915
									],
									[
										97071,
										97076
									],
									[
										97157,
										97162
									],
									[
										97228,
										97233
									],
									[
										97298,
										97303
									],
									[
										97338,
										97343
									],
									[
										97407,
										97412
									],
									[
										97488,
										97493
									],
									[
										97577,
										97582
									],
									[
										97653,
										97658
									],
									[
										97862,
										97867
									],
									[
										97887,
										97892
									],
									[
										97934,
										97939
									],
									[
										98068,
										98073
									],
									[
										98210,
										98215
									],
									[
										98270,
										98275
									],
									[
										98385,
										98390
									],
									[
										98436,
										98441
									],
									[
										98442,
										98447
									],
									[
										98487,
										98492
									],
									[
										98535,
										98540
									],
									[
										98594,
										98599
									],
									[
										98650,
										98655
									],
									[
										98785,
										98790
									],
									[
										99055,
										99060
									],
									[
										99236,
										99241
									],
									[
										99303,
										99308
									],
									[
										99368,
										99373
									],
									[
										99680,
										99685
									],
									[
										99909,
										99914
									],
									[
										100083,
										100088
									],
									[
										100206,
										100211
									],
									[
										100491,
										100496
									],
									[
										100510,
										100515
									],
									[
										100639,
										100644
									],
									[
										100888,
										100893
									],
									[
										100907,
										100912
									],
									[
										101043,
										101048
									],
									[
										101237,
										101242
									],
									[
										101284,
										101289
									],
									[
										101303,
										101308
									],
									[
										101393,
										101398
									],
									[
										101600,
										101605
									],
									[
										101625,
										101630
									],
									[
										101701,
										101706
									],
									[
										101873,
										101878
									],
									[
										102071,
										102076
									],
									[
										102101,
										102106
									],
									[
										102177,
										102182
									],
									[
										102333,
										102338
									],
									[
										102522,
										102527
									],
									[
										102541,
										102546
									],
									[
										102656,
										102661
									],
									[
										102848,
										102853
									],
									[
										102872,
										102877
									],
									[
										102997,
										103002
									],
									[
										103231,
										103236
									],
									[
										103255,
										103260
									],
									[
										103395,
										103400
									],
									[
										103571,
										103576
									],
									[
										103929,
										103934
									],
									[
										104101,
										104106
									],
									[
										104112,
										104117
									],
									[
										104439,
										104444
									],
									[
										104585,
										104590
									],
									[
										104604,
										104609
									],
									[
										104751,
										104756
									],
									[
										104967,
										104972
									],
									[
										104994,
										104999
									],
									[
										105163,
										105168
									],
									[
										105178,
										105183
									],
									[
										105190,
										105195
									],
									[
										105281,
										105286
									],
									[
										105345,
										105350
									],
									[
										105378,
										105383
									],
									[
										105507,
										105512
									],
									[
										105522,
										105527
									],
									[
										105534,
										105539
									],
									[
										105621,
										105626
									],
									[
										105676,
										105681
									],
									[
										105740,
										105745
									],
									[
										105780,
										105785
									],
									[
										105934,
										105939
									],
									[
										106000,
										106005
									],
									[
										106094,
										106099
									],
									[
										106231,
										106236
									],
									[
										106244,
										106249
									],
									[
										106382,
										106387
									],
									[
										106588,
										106593
									],
									[
										106653,
										106658
									],
									[
										106724,
										106729
									],
									[
										106842,
										106847
									],
									[
										106902,
										106907
									],
									[
										107097,
										107102
									],
									[
										107290,
										107295
									],
									[
										107315,
										107320
									],
									[
										107349,
										107354
									],
									[
										107374,
										107379
									],
									[
										107413,
										107418
									],
									[
										107474,
										107479
									],
									[
										107487,
										107492
									],
									[
										107532,
										107537
									],
									[
										107545,
										107550
									],
									[
										107602,
										107607
									],
									[
										107733,
										107738
									],
									[
										107799,
										107804
									],
									[
										107856,
										107861
									],
									[
										107983,
										107988
									],
									[
										108013,
										108018
									],
									[
										108151,
										108156
									],
									[
										108427,
										108432
									],
									[
										108469,
										108474
									],
									[
										108628,
										108633
									],
									[
										108648,
										108653
									],
									[
										108795,
										108800
									],
									[
										108865,
										108870
									],
									[
										108941,
										108946
									],
									[
										109010,
										109015
									],
									[
										109064,
										109069
									],
									[
										109249,
										109254
									],
									[
										109321,
										109326
									],
									[
										109514,
										109519
									],
									[
										109845,
										109850
									],
									[
										109858,
										109863
									],
									[
										110161,
										110166
									],
									[
										110236,
										110241
									],
									[
										110342,
										110347
									],
									[
										110356,
										110361
									],
									[
										110497,
										110502
									],
									[
										110697,
										110702
									],
									[
										110764,
										110769
									],
									[
										110845,
										110850
									],
									[
										111060,
										111065
									],
									[
										111141,
										111146
									],
									[
										111344,
										111349
									],
									[
										111358,
										111363
									],
									[
										111514,
										111519
									],
									[
										111688,
										111693
									],
									[
										111864,
										111869
									],
									[
										111996,
										112001
									],
									[
										112170,
										112175
									],
									[
										112395,
										112400
									],
									[
										112470,
										112475
									],
									[
										112583,
										112588
									],
									[
										112597,
										112602
									],
									[
										112742,
										112747
									],
									[
										112866,
										112871
									],
									[
										112879,
										112884
									],
									[
										112888,
										112893
									],
									[
										112932,
										112937
									],
									[
										113113,
										113118
									],
									[
										113127,
										113132
									],
									[
										113281,
										113286
									],
									[
										113468,
										113473
									],
									[
										113624,
										113629
									],
									[
										113843,
										113848
									],
									[
										113928,
										113933
									],
									[
										114087,
										114092
									],
									[
										114101,
										114106
									],
									[
										114131,
										114136
									],
									[
										114151,
										114156
									],
									[
										114162,
										114167
									],
									[
										114192,
										114197
									],
									[
										114217,
										114222
									],
									[
										114379,
										114384
									],
									[
										114505,
										114510
									],
									[
										114681,
										114686
									],
									[
										114707,
										114712
									],
									[
										114957,
										114962
									],
									[
										115180,
										115185
									],
									[
										115193,
										115198
									],
									[
										115258,
										115263
									],
									[
										115377,
										115382
									],
									[
										115493,
										115498
									],
									[
										115557,
										115562
									],
									[
										115683,
										115688
									],
									[
										115700,
										115705
									],
									[
										115776,
										115781
									],
									[
										115797,
										115802
									],
									[
										115843,
										115848
									],
									[
										115896,
										115901
									],
									[
										116052,
										116057
									],
									[
										116066,
										116071
									],
									[
										116148,
										116153
									],
									[
										116212,
										116217
									],
									[
										116360,
										116365
									],
									[
										116377,
										116382
									],
									[
										116430,
										116435
									],
									[
										116451,
										116456
									],
									[
										116497,
										116502
									],
									[
										116528,
										116533
									],
									[
										116644,
										116649
									],
									[
										116857,
										116862
									],
									[
										117040,
										117045
									],
									[
										117318,
										117323
									],
									[
										117367,
										117372
									],
									[
										117558,
										117563
									],
									[
										117736,
										117741
									],
									[
										117756,
										117761
									],
									[
										117785,
										117790
									],
									[
										117805,
										117810
									],
									[
										117839,
										117844
									],
									[
										117895,
										117900
									],
									[
										117903,
										117908
									],
									[
										117943,
										117948
									],
									[
										117951,
										117956
									],
									[
										118003,
										118008
									],
									[
										118234,
										118239
									],
									[
										118283,
										118288
									],
									[
										118455,
										118460
									],
									[
										118679,
										118684
									],
									[
										118811,
										118816
									],
									[
										118825,
										118830
									],
									[
										118954,
										118959
									],
									[
										119140,
										119145
									],
									[
										119154,
										119159
									],
									[
										119298,
										119303
									],
									[
										119445,
										119450
									],
									[
										119642,
										119647
									],
									[
										119656,
										119661
									],
									[
										119785,
										119790
									],
									[
										119952,
										119957
									],
									[
										120144,
										120149
									],
									[
										120158,
										120163
									],
									[
										120290,
										120295
									],
									[
										120457,
										120462
									],
									[
										120655,
										120660
									],
									[
										120669,
										120674
									],
									[
										120799,
										120804
									],
									[
										120947,
										120952
									],
									[
										121146,
										121151
									],
									[
										121160,
										121165
									],
									[
										121292,
										121297
									],
									[
										121440,
										121445
									],
									[
										121606,
										121611
									],
									[
										121620,
										121625
									],
									[
										121756,
										121761
									],
									[
										121885,
										121890
									],
									[
										122044,
										122049
									],
									[
										122214,
										122219
									],
									[
										122228,
										122233
									],
									[
										122345,
										122350
									],
									[
										122582,
										122587
									],
									[
										122596,
										122601
									],
									[
										122713,
										122718
									],
									[
										122911,
										122916
									],
									[
										122925,
										122930
									],
									[
										123065,
										123070
									],
									[
										123251,
										123256
									],
									[
										123476,
										123481
									],
									[
										123650,
										123655
									],
									[
										123827,
										123832
									],
									[
										124042,
										124047
									],
									[
										124200,
										124205
									],
									[
										124406,
										124411
									],
									[
										124621,
										124626
									],
									[
										124752,
										124757
									],
									[
										124950,
										124955
									],
									[
										125080,
										125085
									],
									[
										125260,
										125265
									],
									[
										125535,
										125540
									],
									[
										125549,
										125554
									],
									[
										125683,
										125688
									],
									[
										125783,
										125788
									],
									[
										125965,
										125970
									],
									[
										125979,
										125984
									],
									[
										126119,
										126124
									],
									[
										126219,
										126224
									],
									[
										126401,
										126406
									],
									[
										126415,
										126420
									],
									[
										126548,
										126553
									],
									[
										126648,
										126653
									],
									[
										126822,
										126827
									],
									[
										126836,
										126841
									],
									[
										126972,
										126977
									],
									[
										127072,
										127077
									],
									[
										127257,
										127262
									],
									[
										127271,
										127276
									],
									[
										127413,
										127418
									],
									[
										127513,
										127518
									],
									[
										127705,
										127710
									],
									[
										127719,
										127724
									],
									[
										127862,
										127867
									],
									[
										127962,
										127967
									],
									[
										128147,
										128152
									],
									[
										128161,
										128166
									],
									[
										128296,
										128301
									],
									[
										128396,
										128401
									],
									[
										128581,
										128586
									],
									[
										128595,
										128600
									],
									[
										128732,
										128737
									],
									[
										128832,
										128837
									],
									[
										129013,
										129018
									],
									[
										129209,
										129214
									],
									[
										129401,
										129406
									],
									[
										129599,
										129604
									],
									[
										129782,
										129787
									],
									[
										129979,
										129984
									],
									[
										130189,
										130194
									],
									[
										130393,
										130398
									],
									[
										130589,
										130594
									],
									[
										130776,
										130781
									],
									[
										130919,
										130924
									],
									[
										131038,
										131043
									],
									[
										131087,
										131092
									],
									[
										131101,
										131106
									],
									[
										131241,
										131246
									],
									[
										131357,
										131362
									],
									[
										131523,
										131528
									],
									[
										131815,
										131820
									],
									[
										132011,
										132016
									],
									[
										132216,
										132221
									],
									[
										132230,
										132235
									],
									[
										132393,
										132398
									],
									[
										132570,
										132575
									],
									[
										132775,
										132780
									],
									[
										132959,
										132964
									],
									[
										133166,
										133171
									],
									[
										133353,
										133358
									],
									[
										133550,
										133555
									],
									[
										133753,
										133758
									],
									[
										133882,
										133887
									],
									[
										134089,
										134094
									],
									[
										134219,
										134224
									],
									[
										134406,
										134411
									],
									[
										134617,
										134622
									],
									[
										134836,
										134841
									],
									[
										135036,
										135041
									],
									[
										135215,
										135220
									],
									[
										135229,
										135234
									],
									[
										135369,
										135374
									],
									[
										135535,
										135540
									],
									[
										135549,
										135554
									],
									[
										135685,
										135690
									],
									[
										135764,
										135769
									],
									[
										135778,
										135783
									],
									[
										135915,
										135920
									],
									[
										136044,
										136049
									],
									[
										136058,
										136063
									],
									[
										136194,
										136199
									],
									[
										136622,
										136627
									],
									[
										136721,
										136726
									],
									[
										136773,
										136778
									],
									[
										137200,
										137205
									],
									[
										137262,
										137267
									],
									[
										137496,
										137501
									],
									[
										137710,
										137715
									],
									[
										137991,
										137996
									],
									[
										138058,
										138063
									],
									[
										138071,
										138076
									],
									[
										138112,
										138117
									],
									[
										138154,
										138159
									],
									[
										138174,
										138179
									],
									[
										138232,
										138237
									],
									[
										138270,
										138275
									],
									[
										138327,
										138332
									],
									[
										138460,
										138465
									],
									[
										138592,
										138597
									],
									[
										138685,
										138690
									],
									[
										138871,
										138876
									],
									[
										138911,
										138916
									],
									[
										139078,
										139083
									],
									[
										139184,
										139189
									],
									[
										139388,
										139393
									],
									[
										139548,
										139553
									],
									[
										139557,
										139562
									],
									[
										139814,
										139819
									],
									[
										139837,
										139842
									],
									[
										139964,
										139969
									],
									[
										140043,
										140048
									],
									[
										140164,
										140169
									],
									[
										140298,
										140303
									],
									[
										140378,
										140383
									],
									[
										140435,
										140440
									],
									[
										140586,
										140591
									],
									[
										140825,
										140830
									],
									[
										140848,
										140853
									],
									[
										140975,
										140980
									],
									[
										141054,
										141059
									],
									[
										141175,
										141180
									],
									[
										141309,
										141314
									],
									[
										141389,
										141394
									],
									[
										141446,
										141451
									],
									[
										141597,
										141602
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								140664,
								140664
							]
						],
						"settings":
						{
							"color_helper.box_height": 19,
							"color_helper.color_scheme": "Packages/User/SuperMonokai.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.preview_meta":
							{
							},
							"color_helper.scan":
							{
								"current_ext": null,
								"current_syntax": "Default/Find Results",
								"enabled": false,
								"last_updated": 1498661319.83
							},
							"default_dir": "/home/simon/Desktop/testing",
							"detect_indentation": false,
							"git_savvy.repo_path": "/home/simon/Desktop/testing",
							"line_numbers": false,
							"output_tag": 6,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 78451.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "TESTING.sublime-project",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 45,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"color_helper.box_height": 19,
							"color_helper.color_scheme": "Packages/User/SuperMonokai.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.preview_meta":
							{
							},
							"color_helper.scan":
							{
								"current_ext": ".sublime-project",
								"current_syntax": "zzz A File Icon zzz/aliases/JSON (Sublime)",
								"enabled": false,
								"last_updated": 1498725237.0
							},
							"git_savvy.file_path": "/home/simon/Desktop/testing/testing.sublime-project",
							"git_savvy.repo_path": "/home/simon/Desktop/testing",
							"syntax": "Packages/zzz A File Icon zzz/aliases/JSON (Sublime).sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 40.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.GitSavvy":
	{
		"height": 267.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.show_commit_info":
	{
		"height": 130.0
	},
	"output.tooltips":
	{
		"height": 124.0
	},
	"pinned_build_system": "",
	"project": "testing.sublime-project",
	"replace":
	{
		"height": 90.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Desktop/KeymasterVue/KeymasterVue.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 357.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"Request"
			]
		],
		"width": 374.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 245.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
